<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://tars-c.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tars-c.github.io/" rel="alternate" type="text/html" /><updated>2020-05-23T21:00:08+09:00</updated><id>https://tars-c.github.io/feed.xml</id><title type="html">타스의 개발 블로그</title><author><name>타스 (TARS-C)</name></author><entry><title type="html">[MFC/WINAPI] 윈도우 클래스 정보 변경하기 (DWLP 미포함)</title><link href="https://tars-c.github.io/2020-05-23/window-class-2" rel="alternate" type="text/html" title="[MFC/WINAPI] 윈도우 클래스 정보 변경하기 (DWLP 미포함)" /><published>2020-05-23T00:00:00+09:00</published><updated>2020-05-23T00:00:00+09:00</updated><id>https://tars-c.github.io/2020-05-23/%EC%9C%88%EB%8F%84%EC%9A%B0%20%ED%81%B4%EB%9E%98%EC%8A%A4%20%EC%A0%95%EB%B3%B4%20%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0</id><content type="html" xml:base="https://tars-c.github.io/2020-05-23/window-class-2">&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;p&gt;윈도우에게 속성을 추가하거나 가지고 있는 윈도우 속성을 제거하기 위해서는&lt;br /&gt;
SetClassLong(), SetWindowLong() 함수를 이용해야 한다.&lt;br /&gt;
무작정 속성값을 설정하는 것이 아니라&lt;br /&gt;
기존 속성값을 가져(Get)와서 값 변경 후 다시 설정(Set)하도록 해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;함수들이 비슷하므로 내용이 반복될 수 있으니 유의바란다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;나도 반복적인 내용을 쓰고 싶지가 않다.&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;setclasslong-함수&quot;&gt;SetClassLong() 함수&lt;/h2&gt;
&lt;p&gt;윈도우 클래스(WNDCLASS)로 등록된 정보를 변경할 수 있는 함수이다.&lt;br /&gt;
x86 환경에서 사용되는 함수이며 64비트 호환을 위해 SetClassLongPtr() 함수를 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;핸들과 정보를 얻을 속성 값 그리고 변경할 값을 인자로 넘겨준다.&lt;/strong&gt;&lt;br /&gt;
속성값은 편리하게 매크로를 사용할 수 있으며&lt;br /&gt;
사용되는 매크로는 함수의 앞 글자를 따서 GCL_ 로 시작된다.&lt;br /&gt;
정상적으로 속성값을 변경했을 시 이전 속성값이 함수에서 반환된다.&lt;/p&gt;

&lt;p&gt;오류로 인한 반환값과 이전에 설정된 속성값(반환값)이 출동할 수 있다.&lt;br /&gt;
GetLastError() 함수를 이용해 오류 정보를 받아볼 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;매크로&lt;/td&gt;
      &lt;td&gt;설명&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCW_ATOM&lt;/td&gt;
      &lt;td&gt;RegisterClass() 함수가 윈도우 클래스 등록 후 리턴값&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_CBCLSEXTRA&lt;/td&gt;
      &lt;td&gt;클래스 여분 메모리 양 (cbClsExtra)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_CBWNDEXTRA&lt;/td&gt;
      &lt;td&gt;윈도우 여분 메모리 양 (cbWndExtra)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_HBRBACKGROUND&lt;/td&gt;
      &lt;td&gt;배경 브러쉬 핸들 (hbrBackground)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_HCURSOR&lt;/td&gt;
      &lt;td&gt;커서 핸들 (hCursor)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_HICON&lt;/td&gt;
      &lt;td&gt;아이콘 핸들 (hIcon)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_HICONSM&lt;/td&gt;
      &lt;td&gt;작은 아이콘 핸들 (hIconSm)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_HMODULE&lt;/td&gt;
      &lt;td&gt;응용 프로그램 인스턴스 핸들 (hInstance)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_MENUNAME&lt;/td&gt;
      &lt;td&gt;뉴 리소스 문자열 (hMenu)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_STYLE&lt;/td&gt;
      &lt;td&gt;윈도우 스타일 (style)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_WNDPROC&lt;/td&gt;
      &lt;td&gt;윈도우 프로시저 (lpfnWndProc)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;Extra Class Memory 관련으로도 사용할 수 있었다.. (지금은 메모리가 넉넉하다)&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;setclasslongptr-함수&quot;&gt;SetClassLongPtr() 함수&lt;/h3&gt;
&lt;p&gt;SetClassLong() 함수와 크게 다를 것이 없다.&lt;br /&gt;
다만, 일부 매크로 함수가 확장되었기 때문에 GCLP_ 로 시작되는 매크로를 사용해야 한다.&lt;br /&gt;
Visual Stduio 가 많이 좋아져서 WinUser.h를 보면 _WIN64 매크로를 감지하여&lt;br /&gt;
GCLP_ 매크로를 굳이 사용하지 않아도 자동으로 치환된다.&lt;/p&gt;

&lt;p&gt;x64 환경에서는 포인터 크기가 커졌기에&lt;br /&gt;
지원하는 매크로 리스트를 보면 주소 및 포인터 부분이 새롭게 확장되어 지원되고 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;매크로&lt;/td&gt;
      &lt;td&gt;설명&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_HBRBACKGROUND&lt;/td&gt;
      &lt;td&gt;백그라운드 브러쉬 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_HCURSOR&lt;/td&gt;
      &lt;td&gt;커서 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_HICON&lt;/td&gt;
      &lt;td&gt;아이콘 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_HICONSM&lt;/td&gt;
      &lt;td&gt;작은 아이콘 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_HMODULE&lt;/td&gt;
      &lt;td&gt;응용 프로그램 인스턴스 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_MENUNAME&lt;/td&gt;
      &lt;td&gt;메뉴 리소스 문자열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_WNDPROC&lt;/td&gt;
      &lt;td&gt;윈도우 프로시저&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;Extra Class Memory 관련으로 사용할 수 있었다.. (지금은 메모리가 넉넉하다)&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setwindowlong-함수&quot;&gt;SetWindowLong() 함수&lt;/h2&gt;
&lt;p&gt;해당 윈도우의 속성을 변경할 수 있는 함수이다.&lt;br /&gt;
x86 환경에서 사용되는 함수이며 64비트 호환을 위해 SetWindowLongPtr() 함수를 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;핸들과 정보를 얻을 속성 값 그리고 변경할 값을 인자로 넘겨준다.&lt;/strong&gt;&lt;br /&gt;
속성값은 편리하게 매크로를 사용할 수 있으며&lt;br /&gt;
사용되는 매크로는 함수의 앞 글자를 따서 GWL_ 로 시작된다.&lt;br /&gt;
정상적으로 속성값을 변경했을 시 이전 속성값이 함수에서 반환된다.&lt;/p&gt;

&lt;p&gt;오류로 인한 반환값과 이전에 설정된 속성값(반환값)이 출동할 수 있다.&lt;br /&gt;
GetLastError() 함수를 이용해 오류 정보를 받아볼 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;매크로&lt;/td&gt;
      &lt;td&gt;설명&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_EXSTYLE&lt;/td&gt;
      &lt;td&gt;확장 윈도우 스타일(WS_EX…)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_HINSTANCE&lt;/td&gt;
      &lt;td&gt;응용 프로그램 인스턴스 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_HWNDPARENT&lt;/td&gt;
      &lt;td&gt;부모 윈도우의 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_ID&lt;/td&gt;
      &lt;td&gt;윈도우의 ID 및 식별자 (resource.h)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_STYLE&lt;/td&gt;
      &lt;td&gt;윈도우 스타일(WS_…)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_USERDATA&lt;/td&gt;
      &lt;td&gt;창과 관련된 사용자 데이터 (창을 만든 응용프로그램에서 사용하기 위한 값)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_WNDPROC&lt;/td&gt;
      &lt;td&gt;윈도우 프로시저 (CallWindowProc() 함수를 이용하여 프로시저 호출 가능)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;Extra Window Memory 관련으로 사용할 수 있었다.. (지금은 메모리가 넉넉하다)&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;setwindowlongptr-함수&quot;&gt;SetWindowLongPtr() 함수&lt;/h3&gt;
&lt;p&gt;SetWindowLong() 함수와 크게 다를 것이 없다.&lt;br /&gt;
다만, 일부 매크로 함수가 확장되었기 때문에 GWLP_ 로 시작되는 매크로를 사용해야 한다.&lt;br /&gt;
Visual Stduio 가 많이 좋아져서 WinUser.h를 보면 _WIN64 매크로를 감지하여&lt;br /&gt;
GWLP_ 매크로를 굳이 사용하지 않아도 자동으로 치환된다.&lt;br /&gt;
캐싱문제로 속성값을 변경한 경우 SetWindowPos() 함수를 호출할 떄까지 적용되지 않는다.&lt;/p&gt;

&lt;p&gt;x64 환경에서는 포인터 크기가 커졌기에&lt;br /&gt;
지원하는 매크로 리스트를 보면 핸들 및 포인터 부분이 새롭게 확장되어 지원되고 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인자로 넘겨준 핸들을 가지고 있는 윈도우를 가지고 있는 프로세스가&lt;br /&gt;
함수 호출 프로세스와 동일한 프로세스가 아니라면 함수가 정상적으로 호출되지 않는다.&lt;/p&gt;

&lt;p&gt;자식창의 부모를 변경하기 위해서는&lt;br /&gt;
GWLP_HWNDPARENT 속성값을 변경하기보다 SetParent() 함수를 이용한다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;매크로&lt;/td&gt;
      &lt;td&gt;설명&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWLP_WNDPROC&lt;/td&gt;
      &lt;td&gt;윈도우 프로시저&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWLP_HINSTANCE&lt;/td&gt;
      &lt;td&gt;응용 프로그램 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWLP_HWNDPARENT&lt;/td&gt;
      &lt;td&gt;부모 윈도우 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWLP_USERDATA&lt;/td&gt;
      &lt;td&gt;사용자 데이터&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWLP_ID&lt;/td&gt;
      &lt;td&gt;윈도우 ID (resource.h)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;SetClassLong()
    &lt;ul&gt;
      &lt;li&gt;WNDCLASS, WNDCLASSEX 구조체에 등록된 속성 정보를 변경시킴&lt;/li&gt;
      &lt;li&gt;핸들, 변경할 속성값, 적용시킬 값을 인자로 요구함&lt;/li&gt;
      &lt;li&gt;x86 함수이므로 x64 환경에선 SetClassLongPtr() 함수를 사용해야함 (매크로 자동치환)&lt;/li&gt;
      &lt;li&gt;리소스 정보 변경할 수 있음 (메뉴, 아이콘, 커서)&lt;/li&gt;
      &lt;li&gt;백그라운드 브러쉬 핸들 변경할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetWindowLong()
    &lt;ul&gt;
      &lt;li&gt;CreateWindow() 함수 호출 시에 사용된 윈도우 관련 속성 정보를 변경시킴&lt;/li&gt;
      &lt;li&gt;핸들, 변경할 속성값, 적용시킬 값을 인자로 요구함&lt;/li&gt;
      &lt;li&gt;x86 함수이므로 x64 환경에선 SetWindowLongPtr() 함수를 사용해야함 (매크로 자동치환)&lt;/li&gt;
      &lt;li&gt;SetWindowLongPtr() 함수 호출 시 SetWindowPos() 함수를 호출해야 변경된 값이 적용됨 (캐싱)&lt;/li&gt;
      &lt;li&gt;SetWindowLongPtr() 함수 호출 프로세스와 창을 가지고 있는 프로세스가 같아야함&lt;/li&gt;
      &lt;li&gt;확장 스타일 변경할 수 있음&lt;/li&gt;
      &lt;li&gt;부모의 핸들을 변경할 수 있음 (SetParent() 함수 이용)&lt;/li&gt;
      &lt;li&gt;확장 스타일(WS_EX_…) 정보를 변경할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;글 다 썻다아 ~&lt;/strong&gt;&lt;/p&gt;</content><author><name>타스 (TARS-C)</name></author><category term="SetClassLong" /><category term="SetWindowLong" /><summary type="html">SetClassLong(), SetClassLongPtr(), SetWindowLong(), SetWindowLongPtr()</summary></entry><entry><title type="html">[삽질기] Shift, Ctrl, Alt 보조키 반복키 인식 문제</title><link href="https://tars-c.github.io/2020-05-22/modifier-key-issue-trytry" rel="alternate" type="text/html" title="[삽질기] Shift, Ctrl, Alt 보조키 반복키 인식 문제" /><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><id>https://tars-c.github.io/2020-05-22/Shift,%20Ctrl,%20Alt%20%EB%B3%B4%EC%A1%B0%ED%82%A4%20%EB%B0%98%EB%B3%B5%ED%82%A4%EC%9D%B8%EC%8B%9D%20%EB%AC%B8%EC%A0%9C</id><content type="html" xml:base="https://tars-c.github.io/2020-05-22/modifier-key-issue-trytry">&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;p&gt;CTRL, SHIFT, ALT 키는 윈도우즈에서 보조키라고 불린다.&lt;br /&gt;
보조키도 일반 키보드와 똑같이 꾹 누르고 있을 때 &lt;strong&gt;계속 메시지가 처리&lt;/strong&gt;되어야한다.&lt;/p&gt;

&lt;p&gt;누군가 말하기 전까지 나는 알지 못했다.&lt;br /&gt;
어떤 키보드를 누르고 있을 땐 메시지가 계속 처리되야 한다는 걸&lt;/p&gt;

&lt;p&gt;WM_KEYDOWN 메시지를 처리하는 OnKeyDown 핸들러에서&lt;br /&gt;
키가 눌렀을 때를 감지하기 위해서 고군분투하며 5시간을 허비했다.&lt;/p&gt;

&lt;p&gt;더 늦게 말씀해주셨다면 하루 이상 소비하지 않았을까…&lt;br /&gt;
도움을 주신분들께 모두 정말 감사합니다.&lt;/p&gt;

&lt;h2 id=&quot;문제점&quot;&gt;문제점&lt;/h2&gt;
&lt;p&gt;VK_BACK은 백스페이스의 가상 키코드이다.&lt;br /&gt;
VK_SPACE는 스페이스바의 가상 키코드이다.&lt;/p&gt;

&lt;p&gt;백스페이스 키와 스페이스바 키를 누르고 있을 때에는 계속해서 메시지가 발생한다.&lt;br /&gt;
이를 반복키라고 표현하겠다. 그리고 위 두 키에는 반복키가 적용이 되고 있다.
다른 키를 눌러도 반복키는 적용 되어야한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만 SHIFT 키를 누를 시 메시지가 한번 밖에 발생되지 않고 있다.&lt;br /&gt;
즉, 반복키가 적용되지 않는다.&lt;/p&gt;

&lt;p&gt;더 심각한건 누를 때가 아니라 키보드에서 손을 떌 때 핸들러가 호출되고 있었다.&lt;br /&gt;
그리고 난 위 방식처럼 작동되는 것이 윈도우즈 10에서 정해진 약속이다 라고 생각했다.&lt;/p&gt;

&lt;p&gt;Shift, Ctrl 키는 특수한 키니까… 당연히 이렇게 작동이 되겠지 라고&lt;br /&gt;
계속.. 계속.. 이상한 약속을 하며 나는 개발에 집중했다.&lt;/p&gt;

&lt;h3 id=&quot;문제-해결-시도&quot;&gt;문제 해결 시도&lt;/h3&gt;
&lt;p&gt;개발을 진행해 나아가면서&lt;br /&gt;
눌렀을 때를 감지해야하므로 키 인식을 해야하기 때문에&lt;br /&gt;
GetAsyncKeyState() GetKeyState() Accelerator() 등 모두 사용해보고&lt;br /&gt;
조건문도 바꾸고 다른 함수도 찾아보고 stackoverflow 관련 이슈도 찾으면서 별짓을 다해봤다.&lt;/p&gt;

&lt;p&gt;근데 아무리 해봐도 키를 누를 때를 감지하지 못했다.&lt;br /&gt;
아직 부족한 지식으로 검색을 통해 후킹을 시도해보기도 해봤다.&lt;br /&gt;
하지만 문제를 해결하기에는 역부족이었다.&lt;/p&gt;

&lt;h3 id=&quot;도움-요청&quot;&gt;도움 요청&lt;/h3&gt;
&lt;p&gt;혹시 몰라서 카카오톡 개발방에 도움을 부탁드렸다.&lt;/p&gt;

&lt;p&gt;방에서는 여러방법들을 제안해주셨지만 해결책으론 부족했다.&lt;br /&gt;
지쳐있는 중에 &lt;code class=&quot;highlighter-rouge&quot;&gt;윈도우 잡부&lt;/code&gt; 라는 닉네임을 가지신 분께서 정말 큰 도움을 주셨다.&lt;br /&gt;
윈도우 잡부: (직접 테스트 코드를 보여주시면서) 저는 정상 작동 하는데요&lt;br /&gt;
나: (당황하며) 혹시 SHIFT 키를 누르고 계실 때 계속해서 메시지가 호출되나요 ?&lt;br /&gt;
윈도우 잡부: 네 아주 잘되는데요.&lt;/p&gt;

&lt;p&gt;윈도우즈10에서 작동 되는지 확인하기 위해 아버지가 사용중이신 컴퓨터를 잠시 빌려 테스트해봤다.&lt;br /&gt;
확인해보니까.. SHIFT 키를 누르고 있으면 메시지 핸들러가 계속 호출되고 있는 것이다.&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;충격 그자체였다.&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;원인1-절전모드&quot;&gt;원인1: 절전모드&lt;/h2&gt;
&lt;p&gt;결국에 내가 사용중인 운영체제 환경이 잘못된 것이 맞았다.&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;지금까지 윈도우 환경이랑 100% 같은 줄 알았는데 아니었다.&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;근본적인 문제는 윈도우즈10을 구동시키는 가상머신이 문제였다.&lt;br /&gt;
키보드 설정하는 부분에서 게임으로 최적화 하여 반응속도를 빠르게 해놨어야 했는데&lt;br /&gt;
배터리 아낀다는 걸 중요하게 여겨서 모두 최대 절전을 해버린 것이다.&lt;br /&gt;
이정도로 키보드 반응속도 까지 조절할 줄이야…
&lt;strong&gt;&lt;del&gt;가상먼신 기술에 감탄한다&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;옵션을 게임 최적화로 바꾸어 보고 재부팅 후 테스트해봤다.&lt;br /&gt;
키보드를 누르자마자 메시지가 핸들러가 호출된다.&lt;br /&gt;
문제는 한가지 더 남아있었다.&lt;/p&gt;

&lt;h2 id=&quot;원인2-키보드-호환&quot;&gt;원인2: 키보드 호환&lt;/h2&gt;
&lt;p&gt;첫번째 문제를 해결했지만&lt;br /&gt;
또 다른 문제점은 누르고 있을 때 메시지가 반복되지 않는다는 것이다.&lt;br /&gt;
즉, 반복키가 적용되지 않고 있다.&lt;/p&gt;

&lt;p&gt;눌렀을 때에만 감지해도 프로그램 개발하는데 문제는 없을 것 같지만&lt;br /&gt;
윈도우즈10 사용자와 똑같은 환경에서 개발해야하는게 당연한거 아닌가라는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;구글에서 찾아봤는데 키보드 호환 문제로 일부 노트북에서 반복키가 설정되지 않는다는 것이다.&lt;br /&gt;
윈도우즈에서는 키보드 호환 문제를 필터키라는 기능으로 개선 방안을 마련해준다.&lt;/p&gt;

&lt;p&gt;그리고 필터키를 사용함으로 써 키가 눌리고 있을 대 키보드의 반응 속도를 설정할 수 있었고&lt;br /&gt;
키를 누르고 있으면 계속해서 메시지가 처리가 되지 않았던 문제를 해결했다.&lt;/p&gt;

&lt;h2 id=&quot;해결-방안&quot;&gt;해결 방안&lt;/h2&gt;

&lt;h3 id=&quot;절전모드-해제&quot;&gt;절전모드 해제&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;키보드 속도 개선
    &lt;ul&gt;
      &lt;li&gt;윈도우즈10 구성 -&amp;gt; 마우스 및 키보드로 이동
        &lt;ul&gt;
          &lt;li&gt;키보드: [✔]게임에 적합한 최적화&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단축키 충돌 방지
    &lt;ul&gt;
      &lt;li&gt;앱 환경설정(⌘ + ,) -&amp;gt; 단축키로 -&amp;gt; Windows10 클릭
        &lt;ul&gt;
          &lt;li&gt;⇧ 에서 SHIFT로 등록&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단축키 속도 개선
    &lt;ul&gt;
      &lt;li&gt;윈도우즈10 구성 -&amp;gt; 부트 순서 -&amp;gt; 외부 부팅장치 -&amp;gt; 고급설정으로 이동
        &lt;ul&gt;
          &lt;li&gt;부트 플래그 추가: devices.kbd.end_delay=10&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;참고 사이트: &lt;a href=&quot;https://kb.parallels.com/123602&quot; target=&quot;_blank&quot;&gt;Parallels: Shift key is not working inside Windows computer connected by RDP&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;키-반복-반응속도-변경&quot;&gt;키 반복 반응속도 변경&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;필터키 켜 ㅇ기
    &lt;ul&gt;
      &lt;li&gt;제어판(큰 아이콘) -&amp;gt; 접근성 센터 -&amp;gt; 키보드를 사용하기 쉽게 설정 -&amp;gt; 필터 키 설정
        &lt;ul&gt;
          &lt;li&gt;[✔]필터 키 켜기&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;바로 가기 키
        &lt;ul&gt;
          &lt;li&gt;모두 체크 해제&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;필터 옵션
        &lt;ul&gt;
          &lt;li&gt;[✔]반복 키 및 느린켜기&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;기타 설정
        &lt;ul&gt;
          &lt;li&gt;모두 체크 해제&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;반복 키 및 느린키 설정으로 이동하여 다음과 같이 설정한다.
    &lt;ul&gt;
      &lt;li&gt;[✔]키 반복 속도 늦춤
        &lt;ul&gt;
          &lt;li&gt;0.3초&lt;/li&gt;
          &lt;li&gt;0.3초&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;레지스트리를 이용한 키보드 반응속도 변경
    &lt;ul&gt;
      &lt;li&gt;기본적으로 설정된 반응 속도는 조금 느리다.&lt;/li&gt;
      &lt;li&gt;빠르게 변경하려면 레지스트리 수정을 해야한다.&lt;/li&gt;
      &lt;li&gt;레지스트리 편집기(regedit)를 열어 다음과 같이 설정한다.
        &lt;ul&gt;
          &lt;li&gt;컴퓨터\HKEY_CURRENT_USER\Control Panel\Accessibility\Keyboard Response 이동&lt;/li&gt;
          &lt;li&gt;AutoRepeatDelay 200 ~ 250&lt;/li&gt;
          &lt;li&gt;AutoRepeatRate: 10 ~ 50&lt;/li&gt;
          &lt;li&gt;Last Valid Delay: 200 ~ 250 (10진수)&lt;/li&gt;
          &lt;li&gt;Last Valid Repeat: 10 ~ 50 (10진수)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;참고 사이트: &lt;a href=&quot;https://renelemon.tistory.com/65?category=897645&quot; target=&quot;_blank&quot;&gt;뱃푸와 레몬 티스토리&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;주의사항은 접근성 센터에서 설정을 덮었으면 다시 레지스트리를 수정해야한다.&lt;br /&gt;
레지스트리를 변경했다면 재부팅은 필수다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음 아래 코드로 누를 때 마다 키가 눌리는지 테스트해보자&lt;/p&gt;
&lt;figcaption&gt;KeyTest.cpp&lt;/figcaption&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// KeyTest.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;windows.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetKeyState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VK_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Press Shift!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;이로써 반복키 문제는 해결했다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;글 다 썻다아 ~&lt;/strong&gt;&lt;/p&gt;</content><author><name>타스 (TARS-C)</name></author><category term="컨트롤" /><category term="CTRL" /><category term="쉬프트" /><category term="SHIFT" /><category term="알트" /><category term="ALT" /><category term="키보드" /><category term="keyboard" /><category term="반복" /><category term="보조키" /><category term="modifier" /><category term="삽질기" /><category term="반복키" /><category term="연타" /><category term="인식" /><summary type="html">[삽질기] Shift, Ctrl, Alt 보조키 반복키인식 문제</summary></entry><entry><title type="html">[MFC/WINAPI] 윈도우 클래스 정보 구하기 (DWLP 미포함)</title><link href="https://tars-c.github.io/2020-05-22/window-class-1" rel="alternate" type="text/html" title="[MFC/WINAPI] 윈도우 클래스 정보 구하기 (DWLP 미포함)" /><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><id>https://tars-c.github.io/2020-05-22/%EC%9C%88%EB%8F%84%EC%9A%B0%20%ED%81%B4%EB%9E%98%EC%8A%A4%20%EC%A0%95%EB%B3%B4%20%EA%B5%AC%ED%95%98%EA%B8%B0</id><content type="html" xml:base="https://tars-c.github.io/2020-05-22/window-class-1">&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;p&gt;MFC에서 기본적으로 등록된 윈도우 클래스(WNDCLASS)를 알아야 하는 경우&lt;br /&gt;
또는 윈도우가 가진 속성이 필요할 때가 있다.&lt;/p&gt;

&lt;p&gt;윈도우에 등록된 정보나 가지고 있는 속성을 알기 위해서는 아래 함수들을 사용해야 한다.&lt;br /&gt;
MFC에서 지원하는 함수가 없기 때문에 &lt;strong&gt;WINAPI에서 제공하는 함수&lt;/strong&gt;를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;함수들이 비슷하므로 내용이 반복될 수 있으니 유의바란다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;나도 반복적인 내용을 쓰고 싶지가 않다.&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;getclassname&quot;&gt;GetClassName()&lt;/h2&gt;
&lt;p&gt;윈도우 핸들과 클래스 이름을 담을 변수와 크기를 적어준다.&lt;br /&gt;
CString 타입 변수에 클래스 이름을 담기 위해서는 버퍼가 미리 확장되어야 한다.&lt;br /&gt;
이 함수를 이용하면 핸들을 알고 있을 때 클래스 이름을 구할 수 있다.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getclassinfo&quot;&gt;GetClassInfo()&lt;/h2&gt;
&lt;p&gt;인스턴스 핸들과 클래스 이름 및 넘겨받을 윈도우 클래스 포인터를 적어준다.&lt;br /&gt;
이 함수를 이용하면 윈도우 초기에 등록된(RegisterClass) 윈도우 클래스 정보를 구할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;예시&quot;&gt;예시&lt;/h3&gt;
&lt;figcaption&gt;MFCApplicationView.cpp&lt;/figcaption&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CProccessMonitorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnInitialUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CFormView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnInitialUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GetParentFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RecalcLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ResizeParentToFit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// =============================================================&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CWnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pButtonWnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetDlgItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDC_BUTTON1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GetClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pButtonWnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hWnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;CWnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pText1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetDlgItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDC_STATIC1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CString&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;버튼 핸들에 해당하는 클래스: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pText1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetWindowTextW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// =============================================================&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WNDCLASS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GetClassInfoW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;CWnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pText2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetDlgItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDC_STATIC2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;윈도우 클래스에 등록된 클래스: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpszClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pText2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetWindowTextW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;결과:&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ClassInfo/getclassinfo_result.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GetClassName() 함수로 핸들을 이용하여 해당하는 클래스 이름을 구할 수 있고&lt;br /&gt;
GetClassInfo() 함수로 구했던 클래스 이름을 가지고 Register한 윈도우 클래스를 구할 수 있다.&lt;/p&gt;

&lt;p&gt;조금 더 다양한 함수를 알아보자.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getclasslong-함수&quot;&gt;GetClassLong() 함수&lt;/h2&gt;
&lt;p&gt;WNDCLASS, WNDCLASSEX 구조체로 등록된 속성들을 가져올 수 있는 함수이다.&lt;br /&gt;
x86 환경에서 사용되는 함수이며 64비트 호환을 위해 GetClassLongPtr() 함수를 제공한다.&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;GetClassInfo() 함수와 상당히 흡사하다&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;핸들과 정보를 얻을 속성 값을 인자로 넘겨준다.&lt;/strong&gt;&lt;br /&gt;
속성값은 편리하게 매크로를 사용할 수 있으며&lt;br /&gt;
사용되는 매크로는 함수의 앞 글자를 따서 GCL_ 로 시작된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 함수 호출에 성공했다면 윈도우가 가진 해당 속성값을 반환한다.&lt;br /&gt;
오류 발생 시 반환값은 0이며 GetLastError() 함수를 이용해 오류 정보를 받아볼 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;매크로&lt;/td&gt;
      &lt;td&gt;설명&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCW_ATOM&lt;/td&gt;
      &lt;td&gt;RegisterClass() 함수가 윈도우 클래스 등록 후 리턴값&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_CBCLSEXTRA&lt;/td&gt;
      &lt;td&gt;클래스 여분 메모리 양 (cbClsExtra)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_CBWNDEXTRA&lt;/td&gt;
      &lt;td&gt;윈도우 여분 메모리 양 (cbWndExtra)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_HBRBACKGROUND&lt;/td&gt;
      &lt;td&gt;배경 브러쉬 핸들 (hbrBackground)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_HCURSOR&lt;/td&gt;
      &lt;td&gt;커서 핸들 (hCursor)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_HICON&lt;/td&gt;
      &lt;td&gt;아이콘 핸들 (hIcon)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_HICONSM&lt;/td&gt;
      &lt;td&gt;작은 아이콘 핸들 (hIconSm)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_HMODULE&lt;/td&gt;
      &lt;td&gt;응용 프로그램 인스턴스 핸들 (hInstance)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_MENUNAME&lt;/td&gt;
      &lt;td&gt;뉴 리소스 문자열 (hMenu)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_STYLE&lt;/td&gt;
      &lt;td&gt;윈도우 스타일 (style)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCL_WNDPROC&lt;/td&gt;
      &lt;td&gt;윈도우 프로시저 (lpfnWndProc)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;Extra Class Memory 관련으로 사용할 수 있었다.. (지금은 메모리가 넉넉하다)&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;getclasslongptr-함수&quot;&gt;GetClassLongPtr() 함수&lt;/h3&gt;
&lt;p&gt;GetClassLong() 함수와 크게 다를 것이 없다.&lt;br /&gt;
다만, 일부 매크로 함수가 확장되었기 때문에 GCLP_ 로 시작되는 매크로를 사용해야 한다.&lt;br /&gt;
Visual Stduio 가 많이 좋아져서 WinUser.h를 보면 _WIN64 매크로를 감지하여&lt;br /&gt;
GCLP_ 매크로를 굳이 사용하지 않아도 자동으로 치환된다.&lt;/p&gt;

&lt;p&gt;x64 환경에서는 포인터 크기가 커졌기에&lt;br /&gt;
지원하는 매크로 리스트를 보면 주소 및 포인터 부분이 새롭게 확장되어 지원되고 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;매크로&lt;/td&gt;
      &lt;td&gt;설명&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_HBRBACKGROUND&lt;/td&gt;
      &lt;td&gt;백그라운드 브러쉬 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_HCURSOR&lt;/td&gt;
      &lt;td&gt;커서 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_HICON&lt;/td&gt;
      &lt;td&gt;아이콘 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_HICONSM&lt;/td&gt;
      &lt;td&gt;작은 아이콘 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_HMODULE&lt;/td&gt;
      &lt;td&gt;응용 프로그램 인스턴스 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_MENUNAME&lt;/td&gt;
      &lt;td&gt;메뉴 리소스 문자열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCLP_WNDPROC&lt;/td&gt;
      &lt;td&gt;윈도우 프로시저&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getwindowlong-함수&quot;&gt;GetWindowLong() 함수&lt;/h2&gt;
&lt;p&gt;CreateWindow() 함수로 윈도우를 생성할 때 등록된&lt;br /&gt;
해당 윈도우의 속성을 가져올 수 있는 함수이다.&lt;br /&gt;
x86 환경에서 사용되는 함수이며 64비트 호환을 위해 GetWindowLongPtr() 함수를 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;핸들과 정보를 얻을 속성 값을 인자로 넘겨준다.&lt;/strong&gt;&lt;br /&gt;
속성값은 편리하게 매크로를 사용할 수 있으며&lt;br /&gt;
사용되는 매크로는 함수의 앞 글자를 따서 GWL_ 로 시작된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 함수 호출에 성공했다면 윈도우가 가진 해당 속성값을 반환한다.&lt;br /&gt;
오류 발생 시 반환값은 0이며 GetLastError() 함수를 이용해 오류 정보를 받아볼 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;매크로&lt;/td&gt;
      &lt;td&gt;설명&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_EXSTYLE&lt;/td&gt;
      &lt;td&gt;확장 윈도우 스타일(WS_EX…)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_HINSTANCE&lt;/td&gt;
      &lt;td&gt;응용 프로그램 인스턴스 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_HWNDPARENT&lt;/td&gt;
      &lt;td&gt;부모 윈도우의 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_ID&lt;/td&gt;
      &lt;td&gt;윈도우의 ID 및 식별자 (resource.h)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_STYLE&lt;/td&gt;
      &lt;td&gt;윈도우 스타일(WS_…)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_USERDATA&lt;/td&gt;
      &lt;td&gt;창과 관련된 사용자 데이터 (창을 만든 응용프로그램에서 사용하기 위한 값)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWL_WNDPROC&lt;/td&gt;
      &lt;td&gt;윈도우 프로시저 (CallWindowProc() 함수를 이용하여 프로시저 호출 가능)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;Extra Window Memory 관련으로 사용할 수 있었다.. (지금은 메모리가 넉넉하다)&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;getwindowlongptr-함수&quot;&gt;GetWindowLongPtr() 함수&lt;/h3&gt;
&lt;p&gt;GetWindowLong() 함수와 크게 다를 것이 없다.&lt;br /&gt;
다만, 일부 매크로 함수가 확장되었기 때문에 GWLP_ 로 시작되는 매크로를 사용해야 한다.&lt;br /&gt;
Visual Stduio 가 많이 좋아져서 WinUser.h를 보면 _WIN64 매크로를 감지하여&lt;br /&gt;
GWLP_ 매크로를 굳이 사용하지 않아도 자동으로 치환된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;x64 환경에서는 포인터 크기가 커졌기에&lt;br /&gt;
지원하는 매크로 리스트를 보면 핸들 및 포인터 부분이 새롭게 확장되어 지원되고 있다.&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;매크로&lt;/td&gt;
      &lt;td&gt;설명&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWLP_WNDPROC&lt;/td&gt;
      &lt;td&gt;윈도우 프로시저&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWLP_HINSTANCE&lt;/td&gt;
      &lt;td&gt;응용 프로그램 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWLP_HWNDPARENT&lt;/td&gt;
      &lt;td&gt;부모 윈도우 핸들&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWLP_USERDATA&lt;/td&gt;
      &lt;td&gt;사용자 데이터&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GWLP_ID&lt;/td&gt;
      &lt;td&gt;윈도우 ID (resource.h)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;GetClassName()
    &lt;ul&gt;
      &lt;li&gt;핸들을 가지고 있는 윈도우 클래스 이름을 버퍼에 저장함&lt;/li&gt;
      &lt;li&gt;윈도우 핸들과 버퍼로 쓰일 변수 및 크기를 인자로 요구함&lt;/li&gt;
      &lt;li&gt;CString 같은 동적 컨테이너인 경우 미리 버퍼 크기를 확장하여야함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GetClassInfo()
    &lt;ul&gt;
      &lt;li&gt;클래스 이름을 이용하여 해당 인스턴스에 등록된 윈도우 클래스구조체(WNDCLASS) 정보를 가져옴&lt;/li&gt;
      &lt;li&gt;인스턴스 핸들, 클래스 이름, 윈도우 클래스 정보를 받을 포인터를 인자로 요구함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GetClassLong()
    &lt;ul&gt;
      &lt;li&gt;WNDCLASS, WNDCLASSEX 구조체에 등록된 속성 정보를 가져옴&lt;/li&gt;
      &lt;li&gt;핸들과 정보를 얻을 속성(매크로)값을 인자로 요구함&lt;/li&gt;
      &lt;li&gt;x86 함수이므로 x64 환경에선 GetClassLongPtr() 함수를 사용해야함 (매크로 자동치환)&lt;/li&gt;
      &lt;li&gt;리소스 정보를 가져올 수 있음(메뉴, 아이콘, 커서)&lt;/li&gt;
      &lt;li&gt;백그라운드 브러쉬 핸들을 가져올 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GetWindowLong()
    &lt;ul&gt;
      &lt;li&gt;CreateWindow() 함수 호출 시에 사용된 윈도우 관련 속성 정보를 가져옴&lt;/li&gt;
      &lt;li&gt;핸들과 정보를 얻을 속성(매크로)값을 인자로 요구함&lt;/li&gt;
      &lt;li&gt;x86 함수이므로 x64 환경에선 GetWindowLongPtr() 함수를 사용해야함 (매크로 자동치환)&lt;/li&gt;
      &lt;li&gt;부모의 핸들을 가져올 수 있음&lt;/li&gt;
      &lt;li&gt;확장 스타일(WS_EX_…) 정보를 가져올 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;글 다 썻다아 ~&lt;/strong&gt;&lt;/p&gt;</content><author><name>타스 (TARS-C)</name></author><category term="MFC" /><category term="GetClassName" /><category term="GetClassInfo" /><category term="GetClassLong" /><category term="GetWindowLong" /><category term="GetClassLongPtr" /><category term="GetWindowLongPtr" /><category term="이름구하기" /><category term="정보구하기" /><category term="RegisterClass" /><summary type="html">GetClassName(), GetCalssInfo(), GetClassLong(), GetClassLongPtr(), GetWindowLong(), GetWindowLongPtr()</summary></entry><entry><title type="html">[MFC] 공 튀기기, 땡겨서 이동시키기 (이미지)</title><link href="https://tars-c.github.io/2020-05-20/sketch-ball" rel="alternate" type="text/html" title="[MFC] 공 튀기기, 땡겨서 이동시키기 (이미지)" /><published>2020-05-20T00:00:00+09:00</published><updated>2020-05-20T00:00:00+09:00</updated><id>https://tars-c.github.io/2020-05-20/%EA%B3%B5%EB%86%80%EC%9D%B4</id><content type="html" xml:base="https://tars-c.github.io/2020-05-20/sketch-ball">&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;p&gt;카카오톡 개발방에 들어가면 가끔&lt;br /&gt;
누군가에게는 힘든 나에게는 할만한 과제가 보인다.&lt;br /&gt;
많은 신입 대학생분들이 과제를 올리면서 도와달라고 한다.&lt;br /&gt;
&lt;img src=&quot;/assets/images/MakeProgram/Sketch/kakao1.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/MakeProgram/Sketch/kakao2.png&quot; alt=&quot;img2&quot; /&gt;&lt;br /&gt;
그들을 도와주면 내가 아는 걸 다시 되새김질 함으로써 잊지 않을 수 있다.&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;재밌는 건 같은 학교인지 과제가 같은 사람도 종종보인다.&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이번해볼 실습은 공을 튀기고 3번 멈추는 것이다.&lt;br /&gt;
너무 간단한거 같아서 공이 날라가는 강도를 조절할 수 있게 만들어봤다.
조금 수학에서 해멨지만 그래도 만들었다.&lt;/p&gt;

&lt;p&gt;복잡한 구조 및 클래스 생성보다는&lt;br /&gt;
단순하게 View.cpp에서 그림을 그리고 계산했다.&lt;/p&gt;

&lt;h2 id=&quot;프로그램-모습&quot;&gt;프로그램 모습&lt;/h2&gt;

&lt;p&gt;결과:&lt;br /&gt;
&lt;img src=&quot;/assets/images/MakeProgram/Sketch/sketch-ball1.gif&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;피타고라스 개념 부분만 참고해서 만들었다.&lt;br /&gt;
다 만들고서 느낀 점이 아직 보완할 점이 많다는 것이다.&lt;/p&gt;

&lt;p&gt;이런 실습은 여러 대학에서 과제로 제출되기 때문에&lt;br /&gt;
코드를 공개하여 대학생분들에게 도움을 주고 싶었다.&lt;br /&gt;
공부를 하고 있다면 &lt;del&gt;지저분한&lt;/del&gt; 코드를 보면서 하나씩 원리를 깨우치며 배우길 바란다.&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;이 코드도 완벽하진 않다.&lt;/del&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;추가-내용-1&quot;&gt;추가 내용 1&lt;/h3&gt;
&lt;p&gt;각도 계산이 부족해보여서 개선 후 Git에 커밋했다.&lt;br /&gt;
이젠 버그도 없고 어느정도 실행하는데 잘되는 것 같다.&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;(사실 버그 없는 프로그램이 더 이상하게 다가온다)&lt;/del&gt;&lt;/strong&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;추가내용-2&quot;&gt;추가내용 2&lt;/h3&gt;
&lt;p&gt;각도 고정 기능을 추가하여 사용자가 편리하게 날릴 수 있게 만들었다.&lt;br /&gt;
&lt;img src=&quot;/assets/images/MakeProgram/Sketch/sketch-ball2.gif&quot; alt=&quot;img1&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;(그림판처럼, 포토샵처럼 Shift 키의 쓰임을 써보고 싶었다.)&lt;/del&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;키보드 관련 이슈가 있었으나 개인문제라는걸 5시간 후에 알았다…&lt;/del&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;함수 최적화는 나중을 기약하고 있다.&lt;br /&gt;
누군가에게 작은 도움이 되었으면 하는 바램이다.&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;쓰레드를 이용해 개선도 해볼까?&lt;/del&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;공놀이 개발에 맛들이긴 했지만.. 할 것이 산더미다.&lt;/del&gt;&lt;/strong&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;저장소-링크&quot;&gt;저장소 링크&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tars-c/Sketch&quot; target=&quot;_blank&quot;&gt;Github Repository: Sketch Ball&lt;/a&gt;&lt;/p&gt;</content><author><name>타스 (TARS-C)</name></author><category term="공놀이" /><category term="Sketch" /><category term="공" /><category term="Ball" /><category term="원" /><category term="Ellipse" /><category term="공튀기기" /><summary type="html">[MFC] 공 튀기기, 땡겨서 이동시키기 (이미지)</summary></entry><entry><title type="html">[MFC][실습] Subclassing (이미지)</title><link href="https://tars-c.github.io/2020-05-18/mfc-subclassing" rel="alternate" type="text/html" title="[MFC][실습] Subclassing (이미지)" /><published>2020-05-18T00:00:00+09:00</published><updated>2020-05-18T00:00:00+09:00</updated><id>https://tars-c.github.io/2020-05-18/%EC%84%9C%EB%B8%8C%ED%81%B4%EB%9E%98%EC%8B%B1</id><content type="html" xml:base="https://tars-c.github.io/2020-05-18/mfc-subclassing">&lt;h1 id=&quot;서론&quot;&gt;서론&lt;/h1&gt;
&lt;p&gt;MFC에서 제공하는 컨트롤 및 뷰는 가장 단순하고&lt;br /&gt;
가장 기본적인 기능만 제공하고 있다.&lt;/p&gt;

&lt;p&gt;기능을 더 확장 및 변경하기 위해서는&lt;br /&gt;
기본으로 제공하는 컨트롤 및 뷰를 상속받아 기능을 확장해야한다.&lt;/p&gt;

&lt;p&gt;기능을 확장한다는 의미는&lt;br /&gt;
기존 컨트롤에 개발자가 기능을 덧붙여&lt;br /&gt;
새로운 컨트롤을 만든다는 의미와 같다.&lt;/p&gt;

&lt;p&gt;컨트롤 및 뷰를 확장하기 위해서는 서브클래싱(Subclassing)을 통해 진행한다.&lt;br /&gt;
서브클래싱을 이용해 윈도우 프로시저에서 보내지는 메시지를 가로채어 기능을 확장한다.&lt;br /&gt;
서브 클래싱은 CWnd 객체에 연결 및 윈도우 프로시저 함수를 대체하는 것이다.&lt;/p&gt;

&lt;p&gt;가로챈 메시지는 윈도우 프로시저에게 전달해 줄 수도 있고&lt;br /&gt;
해당 컨트롤이 처리 후 다른 윈도우 프로시저에게 전달하지 않을 수 있다.&lt;/p&gt;

&lt;p&gt;PreTranslateMessage() 가상함수에서도 메시지를 가로챌 수 있지만&lt;br /&gt;
코드가 길어질 수록 구조가 복잡하게 변할 위험이 있다.&lt;/p&gt;

&lt;p&gt;MFC 2.x, WINAPI에서는 복잡한 함수 호출 과정을 거쳤지만&lt;br /&gt;
4.x 버전이후부터는 과정이 단순하게 개선되었다.&lt;/p&gt;

&lt;p&gt;서브 클래싱은 2가지로 구분한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;정적 서브 클래싱&lt;/li&gt;
  &lt;li&gt;동적 서브 클래싱&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정적-서브-클래싱&quot;&gt;정적 서브 클래싱&lt;/h2&gt;
&lt;p&gt;정적 서브 클래싱은 간단하게 말해서 DDX와 연결된 서브 클래싱을 의미한다.&lt;br /&gt;
기본 타입(CEdit)으로 연결된 것을 확장타입(CMyEdit)으로 DDX_Control 연결을 하는 것이다.&lt;br /&gt;
가장 중요한건 동적 서브 클래싱이기에 간단히만 알아보도록 한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DDX_Control(pDX, IDC_MYEDIT, m_edit);&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;동적-서브-클래싱&quot;&gt;동적 서브 클래싱&lt;/h2&gt;
&lt;p&gt;동적 서브 클래싱을 하기 위해 필요한 함수는&lt;br /&gt;
CWnd::SubclassDlgItem() 및 CWnd::SubSubclassWindow() 이다.&lt;br /&gt;
런타임에서 서브클래싱을 할 수 있다.&lt;br /&gt;
프로그램이 실행 되면서 프로시저를 변경할 때 아주 유용하게 쓰인다.&lt;br /&gt;
프로시저가 변경된다는 것은 프로그램의 처리 결과를 바뀌게 된다는 의미이다.&lt;/p&gt;

&lt;h2 id=&quot;unsubclasswindow-함수&quot;&gt;UnsubclassWindow() 함수&lt;/h2&gt;
&lt;p&gt;서브 클래싱을 동적으로 해제해줄 수 있는 함수이다.&lt;br /&gt;
이 함수를 해제하면 기본 윈도우 프로시저가 메시지를 처리하게 된다.&lt;br /&gt;
동적 서브 클래싱이 되지 않은 객체한테 사용하면 Crash를 겪게될 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;subclassdlgitem-함수&quot;&gt;SubclassDlgItem() 함수&lt;/h2&gt;
&lt;p&gt;서브 클래싱할 컨트롤 리소스 ID와 부모 윈도우 포인터를 요구한다. (IDC_MYEDIT)&lt;br /&gt;
부모는 보통 폼에 컨트롤을 배치하기 때문에 View의 포인터를 적어준다.&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A.SubclassDlgItem(B, C);&lt;br /&gt;
-&amp;gt; 부모 C의 배치된 B 컨트롤 프로시저를 A가 지닌 프로시저로 대체한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;만약 컨트롤이 단계별로 여러개의 컨트롤로 구성되어 있을 땐&lt;br /&gt;
View가 아닌 해당 컨트롤이 배치되는 부모 컨트롤의 포인터를 적어주도록 한다.&lt;/p&gt;

&lt;h3 id=&quot;코드-및-실습&quot;&gt;코드 및 실습&lt;/h3&gt;
&lt;p&gt;구현은 다음과 같이 진행한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;CFormView 를 상속받는 SDI 프로젝트를 만든다. (TESUB)&lt;/li&gt;
  &lt;li&gt;폼에 Edit Control(IDC_MYEDIT), Button Control(IDC_BUTTON1) 을 배치한다.&lt;/li&gt;
  &lt;li&gt;기존 CEdit을 상속받아 새로운 컨트롤 클래스를 만든다. (CMyEdit)
    &lt;ul&gt;
      &lt;li&gt;WM_CTLCOLOR 핸들러 추가 및 적용
        &lt;ul&gt;
          &lt;li&gt;텍스트 색상: 빨간색&lt;/li&gt;
          &lt;li&gt;배경모드: 투명&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;WM_CHAR 핸들러 추가 및 적용
        &lt;ul&gt;
          &lt;li&gt;숫자만 입력 가능하게 처리&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;View.h 에서 다음과 같이 진행한다.
    &lt;ul&gt;
      &lt;li&gt;#include &quot;CMyEdit.h&quot; 추가&lt;/li&gt;
      &lt;li&gt;CMyEdit 변수 선언(m_MyEdit)&lt;/li&gt;
      &lt;li&gt;플래그 변수 선언(m_initFlag)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;View.cpp 에서 IDC_BUTTON1 컨트롤 BN_CLICKED 메시지 처리
    &lt;ul&gt;
      &lt;li&gt;버튼을 누르면 서브 클래싱이 되어 프로시저 변경&lt;/li&gt;
      &lt;li&gt;서브클래싱이 적용된 상태에서 다시 버튼을 누르면 서브 클래싱이 해제&lt;/li&gt;
      &lt;li&gt;서브클래싱 적용 / 미적용 텍스트 변경 (플래그 값 변경됨)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figcaption&gt;CMyEdit.h&lt;/figcaption&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#pragma once
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CMyEdit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CEdit&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DECLARE_DYNAMIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMyEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CMyEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMyEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;protected:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;afx_msg&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRepCnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;afx_msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HBRUSH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CtlColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*pDC*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*nCtlColor*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PreSubclassWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//나머지 생략&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figcaption&gt;CMyEdit.cpp&lt;/figcaption&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMyEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ON_CONTROL_REFLECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EN_CHANGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMyEdit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnEnChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ON_WM_CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ON_WM_CTLCOLOR_REFLECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;END_MESSAGE_MAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMyEdit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRepCnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'9'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VK_BACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;CEdit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRepCnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HBRUSH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMyEdit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CtlColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pDC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nCtlColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// TODO:  여기서 DC의 특성을 변경합니다.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HBRUSH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hBrush&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nCtlColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CTLCOLOR_EDIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hBrush&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateSolidBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RGB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetBkMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANSPARENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetTextColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RGB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;210&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMyEdit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreSubclassWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// TODO: 여기에 특수화된 코드를 추가 및/또는 기본 클래스를 호출합니다.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Invalidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;SetFocus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CEdit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreSubclassWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figcaption&gt;TESUBView.h&lt;/figcaption&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#pragma once
#include &quot;CMyEdit.h&quot;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CTESUBView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFormView&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;protected:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// serialization에서만 만들어집니다.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CTESUBView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DECLARE_DYNCREATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CTESUBView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef AFX_DESIGN_TIME
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDD_TESUB_FORM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CTESUBView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;protected:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 작업입니다.&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_initFlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CMyEdit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_myEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;afx_msg&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBnClickedButton1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figcaption&gt;TESUBView.cpp&lt;/figcaption&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CTESUBView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFormView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ON_BN_CLICKED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDC_BUTTON1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CTESUBView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnBnClickedButton1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;END_MESSAGE_MAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;CTESUBView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CTESUBView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFormView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDD_TESUB_FORM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_initFlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CTESUBView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CTESUBView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CTESUBView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnBnClickedButton1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_initFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;GetFocus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetWindowText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;서브클래싱 미적용&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_myEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SubclassDlgItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDC_MYEDIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;GetFocus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetWindowText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;서브클래싱 적용&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_myEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnsubclassWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Invalidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_initFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_initFlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;주의사항&quot;&gt;주의사항&lt;/h3&gt;
&lt;p&gt;WM_CTLCOLOR 핸들러는  새로운 컨트롤의 모습을 갱신하기 위해서는&lt;br /&gt;
서브 클래싱이 적용된 순간 컨트롤을 새롭게 그릴 수 있게 Invalidate() 함수를 호출한다.&lt;br /&gt;
SetFocus() 함수를 이용해서 즉시 화면을 갱신한다.&lt;/p&gt;

&lt;p&gt;서브 클래싱 해제 시에는 서브 클래싱 객체에 접근할 수 없기 때문에&lt;br /&gt;
컨트롤이 배치된 부모 컨트롤(View)에 접근해서 Invalidate() 함수를 호출하여 화면을 새로 그린다.&lt;/p&gt;

&lt;h3 id=&quot;결과&quot;&gt;결과&lt;/h3&gt;
&lt;p&gt;서브 클래싱 버튼을 누르면 프로시저가 대체되면서 숫자만 입력 가능하게 변경된다.&lt;br /&gt;
또 컨트롤 입력창 텍스트의 색상은 빨간색으로 변경된다.&lt;/p&gt;

&lt;p&gt;Result.gif File(4.24MB)&lt;br /&gt;
&lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FJwAW1%2FbtqEeYjfXZx%2FzawoqCbtGBNro1ihJA1KL1%2Fimg.gif&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;subclasswindow-함수&quot;&gt;SubclassWindow() 함수&lt;/h2&gt;
&lt;p&gt;프로시저를 바꿀 윈도우의 핸들을 요구한다.&lt;br /&gt;
핸들이 참조하고 있는 객체의 CWnd 객체로 연결되고 윈도우가 가지고 있는 핸들의 프로시저가 변경된다.&lt;br /&gt;
CWnd 객체는 MFC 윈도우 클래스이다.&lt;/p&gt;

&lt;p&gt;이 함수는 WINAPI로 만들어진 윈도우 및 컨트롤을 서브 클래싱할 때 사용된다.&lt;br /&gt;
WINAPI와 혼용해서 사용하도록 하자.&lt;/p&gt;

&lt;p&gt;CWnd 객체 포인터를 가진 객체에게 위 함수를 이용해 서브클래싱을 시도하는 경우 Crash가 발생할 수 있다.&lt;br /&gt;
VERIFY, ASSERT 매크로 함수를 이용해 사용하는 것이 런타임에서 안전하다.&lt;br /&gt;
가능한 WINAPI에서 핸들을 얻어올 때 사용하자.&lt;/p&gt;

&lt;p&gt;WINAPI GetWindow() 함수를 이용해 자식 컨트롤의 핸들을 얻어 사용할 수도 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A.SubClassWindow(C)&lt;br /&gt;
-&amp;gt; C 핸들을 가지고 있는 윈도우의 프로시저를 A 객체 프로시저로 대체한다.&lt;br /&gt;
-&amp;gt; C의 핸들 값이 A에게 주어진다. (두 핸들이 서로 동일해짐)&lt;br /&gt;
-&amp;gt; CWnd 객체로 연결된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;복잡한 실습보다 아주 간단하게 사용만 해보자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CTESUBView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnInitialUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_editHwnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Edit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WS_VISIBLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WS_CHILD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WS_BORDER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hWnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AfxGetInstanceHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_myEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SubclassWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_editHwnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;m_myEdit는 기본 CEdit를 상속받아 만든 CMyEdit 확장 클래스이다.&lt;br /&gt;
서브 클래싱을 하기 전에 m_myEdit은 null이다.&lt;br /&gt;
m_editHwnd 핸들값으로 CWnd 객체를 생성하고 m_myEdit에 연결시킨다.&lt;br /&gt;
객체가 연결됨으로 기본 프로시저가 아닌 CMyEdit 프로시저가 메시지를 처리한다.&lt;br /&gt;
추가로 m_myEdit 객체가 가지고 있는 함수도 이용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;글 다 썻다아 ~&lt;/strong&gt;&lt;/p&gt;</content><author><name>타스 (TARS-C)</name></author><category term="서브클래싱" /><category term="Subclassing" /><category term="SubclassDlgItem" /><category term="UnsubclassWindow" /><category term="SubclassWindow" /><summary type="html">[MFC][실습] Subclassing (이미지)</summary></entry><entry><title type="html">[WINAPI][CODE] USB 꺼내기 처리</title><link href="https://tars-c.github.io/2020-05-17/winapi-code-usb-eject" rel="alternate" type="text/html" title="[WINAPI][CODE] USB 꺼내기 처리" /><published>2020-05-17T00:00:00+09:00</published><updated>2020-05-17T00:00:00+09:00</updated><id>https://tars-c.github.io/2020-05-17/USB%20%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80%20%EA%BA%BC%EB%82%B4%EA%B8%B0%20%EC%B2%98%EB%A6%AC</id><content type="html" xml:base="https://tars-c.github.io/2020-05-17/winapi-code-usb-eject">&lt;p&gt;아래 코드는 죠우저프님이 제공해주신 코드입니다.&lt;br /&gt;
죠우저프님의 허락을 받아 공유합니다.&lt;br /&gt;
WINAPI, C언어 입니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;///////////////////////////////////////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//                      USB 스토리지 '꺼내기' 처리&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 시작일: 2020-05-17&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 프로그래머: 죠우저프&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;///////////////////////////////////////////////////////////////////////////////&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#undef  UNICODE
#define WIN32_LEAN_AND_MEAN
#include &amp;lt;Windows.h&amp;gt;
#include &amp;lt;Shlwapi.h&amp;gt;    //wvnsprintf()
#include &amp;lt;Setupapi.h&amp;gt;
#include &amp;lt;winioctl.h&amp;gt;
#include &amp;lt;cfgmgr32.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define Printf printf
#define LOCAL(type) static type WINAPI
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#pragma comment(lib, &quot;SETUPAPI.LIB&quot;)    //SetupDiDestroyDeviceInfoList()
&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//-----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//      주어진 드라이브의 물리드라이버 번호를 리턴함 (없으면 -1리턴)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  '\\.\H:' -&amp;gt; 4&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  '\\?\scsi#disk&amp;amp;ven_seagate&amp;amp;prod_bup_sl#000000#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}' -&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  '\\?\ide#diskadata_sp550_____________________________o1230c__#5&amp;amp;28ae51b&amp;amp;0&amp;amp;0.0.0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}' -&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  '\\?\scsi#diskromex___ramdisk_________2011#1&amp;amp;1a590e2c&amp;amp;0&amp;amp;000#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}' -&amp;gt; 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  '\\?\ide#diskwdc_wd10ezex-60wn4a0____________________01.01a01#5&amp;amp;2b6bfe7d&amp;amp;0&amp;amp;1.1.0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}' -&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  '\\?\usbstor#disk&amp;amp;ven_generic&amp;amp;prod_storage_device&amp;amp;rev_1404#6&amp;amp;965d76a&amp;amp;5#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}' -&amp;gt; 4&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//-----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LOCAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetPhysicalDeviceNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPCSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VolAccPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PhyDevNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hVolume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;RetBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;STORAGE_DEVICE_NUMBER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hVolume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VolAccPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_SHARE_READ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILE_SHARE_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPEN_EXISTING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceIoControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hVolume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOCTL_STORAGE_GET_DEVICE_NUMBER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PhyDevNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;CloseHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hVolume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Printf(&quot;'%s' -&amp;gt; %d\n&quot;, VolAccPath, PhyDevNo);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhyDevNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;




&lt;span class=&quot;c1&quot;&gt;//-----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//      주어진 드라이브의 인터페이스 핸들과 GUID를 얻음&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//-----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LOCAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HDEVINFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetDeviceInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriveLetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpGuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HDEVINFO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hDevInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DevPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DosDevName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;wsprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DevPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%c:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriveLetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetDriveType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DevPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DRIVE_REMOVABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;wsprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DevPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%c:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriveLetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryDosDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DevPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DosDevName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DosDevName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcExit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//'\Device\HarddiskVolume11' 이런 문자열 리턴&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DosDevName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Floppy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GUID_DEVINTERFACE_FLOPPY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GUID_DEVINTERFACE_DISK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DRIVE_FIXED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GUID_DEVINTERFACE_DISK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DRIVE_CDROM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GUID_DEVINTERFACE_CDROM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcExit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;hDevInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetupDiGetClassDevs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIGCF_PRESENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DIGCF_DEVICEINTERFACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//Get device interface info set handle for all devices attached to system&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;ProcExit:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpGuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpGuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hDevInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;



&lt;span class=&quot;c1&quot;&gt;//----------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//      주어진 드라이브의 디바이스 인스턴스 순번을 얻음&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//----------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LOCAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEVINST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetDrivesDevInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriveLetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhyDevNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CHAR&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;VolAccPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DEVINST&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hDevInfoRslt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HDEVINFO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hDevInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SP_DEVICE_INTERFACE_DETAIL_DATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPDIDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SP_DEVICE_INTERFACE_DATA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPDID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SP_DEVINFO_DATA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hDevInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetDeviceInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DriveLetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcExit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;wsprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VolAccPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%c:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriveLetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhyDevNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetPhysicalDeviceNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VolAccPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcExit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;SPDIDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SP_DEVICE_INTERFACE_DETAIL_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SPDID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPDID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetupDiEnumDeviceInterfaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hDevInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPDID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SetupDiGetDeviceInterfaceDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hDevInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPDID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//필요한 버퍼크기를 얻음&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;SPDIDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPDIDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ZeroMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SPDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetupDiGetDeviceInterfaceDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hDevInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPDID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPDIDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;#if 0
            //USB의 VID와 PID를 알고 싶으면
            DEVINST DevInstParent=0;
            CM_Get_Parent(&amp;amp;DevInstParent, SPDD.DevInst, 0);
            CHAR DeviceId[MAX_PATH];
            CM_Get_Device_ID(DevInstParent, DeviceId, MAX_PATH, 0);
            Printf(&quot;PhyDevNo=%d, DevInst=%d, DeviceId=%s\n&quot;, GetPhysicalDeviceNumber(SPDIDD-&amp;gt;DevicePath), SPDD.DevInst, DeviceId);
                    //PhyDevNo=3, DevInst=1, DeviceId=USB\VID_0BC2&amp;amp;PID_AB30\MSFT30NA9SPF3M
                    //PhyDevNo=1, DevInst=2, DeviceId=PCIIDE\IDECHANNEL\4&amp;amp;1010A736&amp;amp;0&amp;amp;0
                    //PhyDevNo=0, DevInst=3, DeviceId=ROOT\SYSTEM\0002
                    //PhyDevNo=2, DevInst=4, DeviceId=PCIIDE\IDECHANNEL\4&amp;amp;1010A736&amp;amp;0&amp;amp;1
                    //PhyDevNo=4, DevInst=5, DeviceId=USB\VID_05E3&amp;amp;PID_0751\5&amp;amp;4F9223B&amp;amp;0&amp;amp;8
            #endif
&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetPhysicalDeviceNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPDIDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DevicePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhyDevNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hDevInfoRslt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DevInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;ProcExit:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hDevInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SetupDiDestroyDeviceInfoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hDevInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hDevInfoRslt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;



&lt;span class=&quot;c1&quot;&gt;//----------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//      주어진 드라이브를 '꺼내기' 처리함&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//----------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WINAPI&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EjectDrive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriveLetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rslt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DevEjtRslt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DEVINST&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DevInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PNP_VETO_TYPE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VetoType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PNP_VetoTypeUnknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VetoNameW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DEVINST&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DevInstParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;VetoNameW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DevInst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetDrivesDevInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DriveLetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcExit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;CM_Get_Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DevInstParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DevInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//드라이브의 부모를 얻음, (예: USB 브리지, SATA 포트, 두 개의 드라이브가있는 IDE 채널)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//안되면 3번 재시도 해봄&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//CM_Query_And_Remove_SubTree() 제한된 사용자에게는 동작안함&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//CM_Query_And_Remove_SubTreeW(DevInstParent, &amp;amp;VetoType, VetoNameW, MAX_PATH, CM_REMOVE_NO_RESTART); //CM_Query_And_Remove_SubTreeA()는 W2000에서는 구현되지 않음&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//CM_Query_And_Remove_SubTreeW(DevInstParent, NULL, NULL, 0, CM_REMOVE_NO_RESTART); //메세지박스(W2K, Vista)나 말풍선(XP)이 뜸&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//CM_Request_Device_EjectW(DevInstParent, NULL, NULL, 0, 0);                        //메세지박스(W2K, Vista)나 말풍선(XP)이 뜸&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DevEjtRslt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CM_Request_Device_EjectW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DevInstParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VetoType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VetoNameW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CR_SUCCESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;VetoType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PNP_VetoTypeUnknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rslt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//다음 시도에 기회를 주어야 함&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Retry...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rslt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;VetoName=%ws&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VetoNameW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CM_Request_Device_EjectW() Result=%Xh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DevEjtRslt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;ProcExit:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rslt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;




&lt;span class=&quot;c1&quot;&gt;//-----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//      USB 스토리지 '꺼내기' 처리&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//-----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EjectDrive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'H'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//꺼내기할 드라이브 레터를 주면됨&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Success&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>타스 (TARS-C)</name></author><category term="WINAPI" /><category term="USB" /><category term="Eject" /><category term="Drive" /><summary type="html">[WINAPI][CODE] USB 꺼내기 처리</summary></entry><entry><title type="html">[MFC] 해당 키가 눌러져 있는지 확인하기</title><link href="https://tars-c.github.io/2020-05-14/press-key" rel="alternate" type="text/html" title="[MFC] 해당 키가 눌러져 있는지 확인하기" /><published>2020-05-14T00:00:00+09:00</published><updated>2020-05-14T00:00:00+09:00</updated><id>https://tars-c.github.io/2020-05-14/%ED%95%B4%EB%8B%B9%20%ED%82%A4%EA%B0%80%20%EB%88%8C%EB%9F%AC%EC%A0%B8%20%EC%9E%88%EB%8A%94%EC%A7%80%20%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0</id><content type="html" xml:base="https://tars-c.github.io/2020-05-14/press-key">&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;p&gt;사용자는 어떤 키를 누를지 모르는 야생마와 비슷하다.&lt;br /&gt;
개발자는 프로그램을 개발하면서 사용자가 특정 키를 누른지를 구해야할 때가 있다.&lt;/p&gt;

&lt;p&gt;해당 키가 눌러져 있는지에 대해 확인하는 함수에 대해 알아본다.&lt;br /&gt;
이때 사용되는 키코드는 Virtual Key Code 이다.&lt;br /&gt;
Virtual Key Code 목록은 다음 링크에서 볼 수 있다.&lt;br /&gt;
&lt;a href=&quot;https://docs.microsoft.com/ko-kr/windows/win32/inputdev/virtual-key-codes&quot; target=&quot;_blank&quot;&gt;LINK: MSDN Virtual Key Code List&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;getkeystate-함수-알아보기&quot;&gt;GetKeyState() 함수 알아보기&lt;/h2&gt;
&lt;p&gt;인자로는 int 타입의 Virtual Key Code를 요구하고 있다.&lt;br /&gt;
반환 타입은 SHORT(16bit, 2Byte) 타입이다.&lt;br /&gt;
2BYTE를 각각 쪼개거나 비트 연산을 통해 정보를 가져와 사용한다.&lt;/p&gt;

&lt;p&gt;반환 데이터에서 high-order bit가 1이면 해당 키를 누른 상태이며 그 외는 땐 상태를 의미한다.&lt;br /&gt;
low-order bit가 1이면 키가 토글된 상태를 의미한다. 그 외는 토글되지 않은 상태를 의미한다.&lt;/p&gt;

&lt;p&gt;토글된 상태 값은 토글키(Toggle Key) 에만 적용되는 속성이다.&lt;br /&gt;
키보드에서 토글키를 누르면 오른쪽 상단의 키보드에 불이 들어오고(1) 다시 누르면 꺼진다(0)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Windows 토글키는 대표적으로 3가지가 존재한다.
    &lt;ul&gt;
      &lt;li&gt;Caps Lock&lt;/li&gt;
      &lt;li&gt;Num Lock&lt;/li&gt;
      &lt;li&gt;Scroll Lock&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getasynckeystate-함수-알아보기&quot;&gt;GetAsyncKeyState() 함수 알아보기&lt;/h2&gt;
&lt;p&gt;이 함수는 비동기이므로 GetKeyState() 함수보다 빠르게 작동한다.&lt;br /&gt;
인자로는 int 타입의 Virtual Key Code를 요구하고 있다.&lt;br /&gt;
반환 타입은 SHORT(16bit, 2Byte) 타입이다.&lt;br /&gt;
위 GetKeyState() 함수와 동일하게 사용방법이 같다.&lt;br /&gt;
토글키에 대한 속성은 구할 수 없다.&lt;/p&gt;

&lt;p&gt;이 함수는 현재 키가 눌렸는지에 대해서만 구할 수 있다.&lt;br /&gt;
또 low order bit를 이용해서 마지막으로 키가 눌렸는지에 대해서도&lt;br /&gt;
구할 수 있었지만 x86 환경에서는 구할 수 없었다.&lt;br /&gt;
혹시 몰라 직접 테스트를 진행해보았으나 프로그램 1개로는 low order bit 값을 확인할 수 없었다.&lt;br /&gt;
아마 16비트 호환성을 위해 low order bit를 유지하고 있는 것 같다 (MSDN)&lt;/p&gt;

&lt;p&gt;high order bit는 키가 눌렀는 지에 대한 상태를 의미하며 아래처럼 사용한다.
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;누른-상태-확인하기&quot;&gt;누른 상태 확인하기&lt;/h2&gt;
&lt;p&gt;키를 누르고 있는지 알기 위해 high order bit와 비트 연산을 진행한다.&lt;/p&gt;

&lt;p&gt;16bit 데이터에서 high order bit, low order bit는 다음과 같다.&lt;br /&gt;
high order bit는 1000 0000 0000 0000 을 의미하고 16진수로는 0x8000 이다.&lt;br /&gt;
low   order bit는 0000 0000 0000 0001 을 의미하고 16진수로는 0x1 이다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetKeyState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// key down code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// VK_CAPITAL = Caps Lock&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetKeyState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VK_CAPITAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// toggle on code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// toggle off code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;‘a’ 를 매개변수로 입력하면 정상적으로 작동하지 않는다.&lt;br /&gt;
‘a’ 는 virtual key code 목록에 존재하지 않기 때문이다. ‘A’ 를 사용하자&lt;br /&gt;
virtual key code는 소문자 아스키를 지원하지 않는다는 것을 명심하자.&lt;/p&gt;

&lt;p&gt;a 키를 누르면 정상적으로 키가 눌린지 감지가 된다.&lt;br /&gt;
Ctrl, Shift 등 다른 키를 누른 상태에서 a 키를 누르면 감지가 되지 않는 점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;글 다썻다아 ~&lt;/strong&gt;&lt;/p&gt;</content><author><name>타스 (TARS-C)</name></author><category term="가상키" /><category term="VK" /><category term="VirtualKey" /><category term="GetKeyState" /><category term="GetAsyncKeyState()" /><category term="상위비트" /><category term="high-order" /><category term="하위비트" /><category term="low-order" /><category term="토글키" /><category term="ToggleKey" /><summary type="html">[MFC] 해당 키가 눌러져 있는지 확인하기</summary></entry><entry><title type="html">[MFC] Form에서 OnChar, OnKeyDown 핸들러 호출이 안 될 시 해결방법</title><link href="https://tars-c.github.io/2020-05-13/form-onchar-onkeydown-issue" rel="alternate" type="text/html" title="[MFC] Form에서 OnChar, OnKeyDown 핸들러 호출이 안 될 시 해결방법" /><published>2020-05-13T00:00:00+09:00</published><updated>2020-05-13T00:00:00+09:00</updated><id>https://tars-c.github.io/2020-05-13/CFormView%20OnChar%20OnKeyDown</id><content type="html" xml:base="https://tars-c.github.io/2020-05-13/form-onchar-onkeydown-issue">&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;p&gt;SDI 프로젝트와 다르게&lt;br /&gt;
컨트롤이 있는 Dialog, FormView에선 OnChar, OnKeyDown 핸들러가 호출되지 않는 현상이 발생한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;핸들러가 호출이 되지 않은 원인은&lt;br /&gt;
사용자가 키를 눌러 메시지를 발생하면 Form 안에 포커스를 가지고 있는 컨트롤이 메시지를 처리한다.&lt;/p&gt;

&lt;p&gt;디버거를 돌려보면 알 수 있듯이 View, Dialog는 메시지를 받지 못하고 처리도 못한다.&lt;br /&gt;
결국에 WM_CHAR, WM_KEYDOWN 메시지는 Form 안에 있는 컨트롤이 보내고 처리한다.&lt;/p&gt;

&lt;p&gt;만약 Form, Dialog, View에 버튼처럼 포커스를 줄 수 있는 컨트롤을 제거하면&lt;br /&gt;
정상적으로 뷰에서도 OnChar, OnKeyDown 핸들러가 호출된다.&lt;/p&gt;

&lt;p&gt;호출 흐름을 적어보면&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;사용자가 키를 누름&lt;/li&gt;
  &lt;li&gt;(WM_KEYDOWN, WM_CHAR) 메시지 큐에 들어감&lt;/li&gt;
  &lt;li&gt;메시지 루프 돌며 처리 대기중&lt;/li&gt;
  &lt;li&gt;컨트롤 PreTranslateMessage 호출됨&lt;/li&gt;
  &lt;li&gt;View PreTranslateMessage 호출됨&lt;/li&gt;
  &lt;li&gt;(메시지를 가로채어 뷰에게 보내주자)&lt;/li&gt;
  &lt;li&gt;메시지 루프가 메시지큐에서 꺼내 메시지 처리&lt;/li&gt;
  &lt;li&gt;OnKeyDown(), OnChar() 핸들러 호출됨&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;
&lt;p&gt;뷰 대신에 포커스를 가진 컨트롤이 메시지를 처리하고 있다.&lt;br /&gt;
메시지 큐에서 메시지를 꺼내기 전(PreTranslateMessage)에 메시지 정보를 얻어 &lt;br /&gt;
SendMessage 함수를 이용해 뷰에 메시지를 보내어 강제로 핸들러를 호출할 수 있다.&lt;/p&gt;

&lt;p&gt;OnKeyDown(), OnChar() 직접적으로 함수 호출은 잘못된 방식이므로 지양해야한다.&lt;/p&gt;
&lt;figcaption&gt;CTEView.cpp&lt;/figcaption&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CTEView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreTranslateMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// TODO: 여기에 특수화된 코드를 추가 및/또는 기본 클래스를 호출합니다.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WM_KEYDOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetSafeHwnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WM_CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetSafeHwnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFormView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreTranslateMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;PreTranslateMessage() 함수의 반환값은 계속 메시지를 처리할 것인지에 대해 결정한다.&lt;/p&gt;

&lt;p&gt;TRUE이면 더 이상 해당 메시지를 처리하지 않는다는 의미이고&lt;br /&gt;
FALSE이면 해당 메시지를 계속 처리한다는 의미이다.&lt;/p&gt;

&lt;p&gt;TRUE 반환 예시를 들어보겠다.&lt;br /&gt;
CButton::PreTranslateMessage() 함수에서 TRUE를 반환하면 그냥 끝이 나버린다.&lt;br /&gt;
다음으로 진행되는 PreTranslateMessage() 함수 및 메시지 핸들러는 호출되지 않는다.&lt;/p&gt;

&lt;p&gt;그럼 반대로 FALSE 반환 예시를 들어보겠다.&lt;br /&gt;
Button::PreTranslateMessage() 함수에서 FALSE를 반환하고&lt;br /&gt;
부모인 TEView::PreTranslateMessage 에서 처리하고 또 FALSE 반환할 시에&lt;br /&gt;
메시지 핸들러까지 호출된다. 만약 첫단계에서는 FALSE를 반환, 두번째에선 TRUE를 반환하면&lt;br /&gt;
해당 메시지 핸들러는 호출되지 않는다.&lt;/p&gt;

&lt;p&gt;PreTranslateMessage() 함수 인자로는 MSG 타입이 넘어온다.&lt;br /&gt;
넘어온 pMSg 구조체는 메시지 관련 정보들을 가지고 있다.&lt;br /&gt;
가지고 있는 정보는 어느 핸들(hwnd)에서 무슨 메시지(message)를 보낸지 알 수 있고&lt;br /&gt;
메시지가 가진 정보(WPARAM, LPARAM)를 이용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;글 다썻다아 ~&lt;/strong&gt;&lt;/p&gt;</content><author><name>타스 (TARS-C)</name></author><category term="다이얼로그" /><category term="Dialog" /><category term="폼뷰" /><category term="CFormView" /><category term="OnChar" /><category term="OnKeyDown" /><category term="PreTranslateMessage" /><category term="핸들러" /><category term="handler" /><summary type="html">[MFC] Form에서 OnChar, OnKeyDown 핸들러 호출이 안 될 시 해결방법</summary></entry><entry><title type="html">[MFC] SDI 프로젝트 Dialog Based 처럼 사용하기</title><link href="https://tars-c.github.io/2020-05-12/sdi-formview" rel="alternate" type="text/html" title="[MFC] SDI 프로젝트 Dialog Based 처럼 사용하기" /><published>2020-05-12T00:00:00+09:00</published><updated>2020-05-12T00:00:00+09:00</updated><id>https://tars-c.github.io/2020-05-12/SDI%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20Dialog%20Based%20%EC%B2%98%EB%9F%BC%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0</id><content type="html" xml:base="https://tars-c.github.io/2020-05-12/sdi-formview">&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;p&gt;SDI 프로젝트는 기본적으로 만들면 CView 클래스를 상속받아 만들어지기 때문에&lt;br /&gt;
리소스뷰 비주얼 에디터를 이용하여 컨트롤 생성 및 배치할 수 없다.&lt;br /&gt;
CView를 상속받은 경우 동적으로 컨트롤을 생성 및 배치해야한다.&lt;/p&gt;

&lt;p&gt;CView와 다르게 CFormView 클래스를 상속받은 경우&lt;br /&gt;
Dialog를 이용한 컨트롤 생성 및 배치가 가능한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번 글에선 CFormView가 간단히 알아보고&lt;br /&gt;
프로젝트를 생성할 때 CFormView를 상속받아 생성하는 법을 알아본다.&lt;br /&gt;
추가로 CView를 상속받은 View를 CFormView로 상속받은 View로 바꾸는 작업도 진행한다.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cformview란-&quot;&gt;CFormView란 ?&lt;/h2&gt;
&lt;p&gt;대화상자 리소스를 이용해 컨트롤을 배치할 수 있는 뷰이다.&lt;br /&gt;
폼 기반의 MFC를 이용한 프로그램을 개발할 때 가장 기본이 되는 뷰이다.&lt;br /&gt;
CSCrollView의 파생 클래스이며 스크롤 기능을 지원한다.&lt;br /&gt;
CFormView를 이용하면 개발자가 양식을 만들어 다른 뷰에도 붙일 수 있다.&lt;/p&gt;

&lt;p&gt;다이얼로그와 연결이 되어 비주얼에디터를 사용할 수 있으므로 생산성에도 영향을 준다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cformview를-상속받는-view-프로젝트-만들기&quot;&gt;CFormView를 상속받는 View 프로젝트 만들기&lt;/h2&gt;
&lt;p&gt;MFC 프로젝트를 만들 때 기본적으로 CView를 상속받는다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음 그림과 같이 기반 클래스를 CFormView를 변경하면
프로젝트를 생성 시 CFormView를 상속받는 View가 만들어진다.&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;생각보다 너무 단순해서 놀랐다.&lt;/del&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/CFormView/create_formview.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cview를-상속받은-view를-cformview로-상속받는-view로-변경하기&quot;&gt;CView를 상속받은 View를 CFormView로 상속받는 View로 변경하기&lt;/h2&gt;
&lt;p&gt;솔루션 이름을 “ TE “ 로 프로젝트를 CView를 상속받은 프로젝트를 만든다. (Test 줄임말)&lt;br /&gt;
Visual Studio 2017 기준으로 작성되었으며 버전이 다를 경우 올바르게 작동하지 않을 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;TEView.h 를 엽니다.&lt;/li&gt;
  &lt;li&gt;CView를 CFormView로 Rename(Ctrl+R+R) 합니다. (미리보기 -&amp;gt; 적용)&lt;/li&gt;
  &lt;li&gt;리소스뷰로 가서 Dialog 삽입 및 ID를 지정합니다. (IDD_TE)&lt;/li&gt;
  &lt;li&gt;창을 눌러 다음과 같이 속성을 변경합니다.
    &lt;ul&gt;
      &lt;li&gt;속성 Style: Popup -&amp;gt; Child&lt;/li&gt;
      &lt;li&gt;속성 System Menu: True -&amp;gt; False&lt;/li&gt;
      &lt;li&gt;속성 Title Bar: True -&amp;gt; False&lt;/li&gt;
      &lt;li&gt;속성 Border: Dialog Frame -&amp;gt; None&lt;/li&gt;
      &lt;li&gt;(요약 - ON: WS_CHILD / OFF:WS_POPUP, WS_SYSMENU, WS_BORDER)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TEView.h 파일을 열어 TEView 클래스 public 멤버변수로 선언합니다.
    &lt;ul&gt;
      &lt;li&gt;enum { IDD = IDD_TE };&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TEView.cpp 디폴트 생성자 정의부에 멤버이니셜라이저로 CFormView 생성자를 호출한다.
    &lt;ul&gt;
      &lt;li&gt;생성자 호출 시 필요한 매개변수는 Dialog ID 입니다.&lt;/li&gt;
      &lt;li&gt;: CFormView(IDD_TE)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TEView.cpp 클래스 마법사를 이용해 OnInitialUpdate() 가상함수를 재정의한다.&lt;/li&gt;
  &lt;li&gt;아래 두 함수를 사용해서 뷰의 크기를 프레임과 맞추고 빌드를 한다.(딘축키: F7)
    &lt;ol&gt;
      &lt;li&gt;GetParentFrame()-&amp;gt;RecalcLayout();&lt;/li&gt;
      &lt;li&gt;ResizeParentToFit();&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;결과:&lt;br /&gt;
&lt;img src=&quot;/assets/images/CFormView/result_formview.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;메뉴-및-툴바-삭제하기&quot;&gt;메뉴 및 툴바 삭제하기&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;툴바를 삭제하고 싶다면 다음과 같이 진행한다.
    &lt;ul&gt;
      &lt;li&gt;CMainFrame::OnCreate() 에서 m_wndToolBar 관련 코드를 주석처리한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;상단 메뉴를 삭제하고 싶다면 다음과 같이 진행한다.
    &lt;ul&gt;
      &lt;li&gt;CTEApp::InitInstance() 창 초기화 작업란에 m_pMainWnd-&amp;gt;SetMenu(NULL); 코드를 삽입한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;글 다 썻다아 ~&lt;/strong&gt;&lt;/p&gt;</content><author><name>타스 (TARS-C)</name></author><category term="SDI" /><category term="프로젝트" /><category term="다이얼로그" /><category term="Dialog" /><category term="폼뷰" /><category term="FormvView" /><category term="툴바" /><category term="Toolbar" /><category term="메뉴" /><category term="Menu" /><category term="삭제하기" /><category term="Destroy" /><summary type="html">[MFC] SDI 프로젝트 Dialog Based 처럼 사용하기</summary></entry><entry><title type="html">[MFC][실습] Document CArchive 비트맵 파일 직렬화</title><link href="https://tars-c.github.io/2020-05-11/implicit-serialize" rel="alternate" type="text/html" title="[MFC][실습] Document CArchive 비트맵 파일 직렬화" /><published>2020-05-11T00:00:00+09:00</published><updated>2020-05-11T00:00:00+09:00</updated><id>https://tars-c.github.io/2020-05-11/Document%20CArchive%20%EB%B9%84%ED%8A%B8%EB%A7%B5%20%EC%A7%81%EB%A0%AC%ED%99%94</id><content type="html" xml:base="https://tars-c.github.io/2020-05-11/implicit-serialize">&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;p&gt;이 글은 stackoverflow, MSDN 을 참고하여 작성되었습니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번 글에서는 비트맵 파일 직렬화를 실습한다.&lt;br /&gt;
국내 개발 블로그를 보면 대부분 기본자료형 위주로 포스팅되어 있다.&lt;br /&gt;
너무 기초만 다루는 것 같았다. &lt;strong&gt;&lt;del&gt;(내 코드도 기초수준이다)&lt;/del&gt;&lt;/strong&gt;&lt;br /&gt;
네트워크 프로그래밍에서 사용되는 직렬화는 더 공부를 하고 다음에 실습하도록 한다.&lt;/p&gt;

&lt;p&gt;명시적(implicit)으로 직렬화 하는 방법에 대해 알아본다.&lt;br /&gt;
암시적이나 명시적이나 모두 비슷하니&lt;br /&gt;
자세한 설명은 이전 글을 참고하도록 하자.&lt;br /&gt;
&lt;a href=&quot;/2020/05/09/explict-serialize.html/&quot; target=&quot;_blank&quot;&gt;이전 글: Document CArchive 기본타입 및 객체 직렬화&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;명시적 직렬화도 암시적이랑 비슷하게 CFile 객체를 CArchive 객체가 참조하여 사용한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CFile 객체를 CArchive 객체가 참조하게 될 때 모드를 정할 수 있다.&lt;/li&gt;
  &lt;li&gt;CArchive::store (저장)&lt;/li&gt;
  &lt;li&gt;CArchive::load (불러오기)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;비트맵의-직렬화&quot;&gt;비트맵의 직렬화&lt;/h2&gt;
&lt;p&gt;아래 코드를 설명해보면&lt;br /&gt;
힙 메모리를 할당하여 이미지 객체와 스트림을 만들고(연결) 메모리에 저장한다.&lt;br /&gt;
CreateStreamOnHGlobal() API 함수를 이용하여 메모리에 스트림을 만든다.&lt;br /&gt;
CImage 클래스에서 제공하는 Save() 함수를 이용해 스트림에 데이터를 저장한다.&lt;/p&gt;

&lt;p&gt;데이터가 저장된 힙 메모리에 함수를 이용해 포인터와 메모리 크기를 구하고&lt;br /&gt;
구한 포인터 위치에서 파일의 크기만큼 CArchive 객체를 이용해 직렬화하여 파일을 저장하는 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;MSDN을 보면 전역(Global) 메모리는 과거에 사용되어졌다고 한다.&lt;br /&gt;
x86 이후의 시스템에서는 16비트 프로그램을 포팅하거나&lt;br /&gt;
16비트 Windows프로그램의 소스코드 호환성 때문에 지원된다고 한다.
&lt;strong&gt;&lt;del&gt;(도대체 언제적 것인지..)&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GlobalAlloc() 함수는 결국에 디폴트 힙을 할당하는 함수의 래퍼함수로 구현되어 있다고 한다.&lt;br /&gt;
이로 인해 오버헤드가 발생한다는 경고문도 적혀있다.&lt;br /&gt;
x86 환경에선 과거 세그먼트 메모리 구조에서 가상 메모리를 사용 구조로 바뀌었다.&lt;/p&gt;

&lt;p&gt;GMEM_MOVEABLE은 이동이 가능한 메모리를 할당하지만&lt;br /&gt;
메모리는 프로세스 영역 내(힙 영역 내)에서만 움직일 수 있다고 한다.&lt;br /&gt;
반대로 고정된 메모리는 GMEM_FIXED를 이용한다.&lt;br /&gt;
메모리 이동은 힙 메모리 단편화와 연관이 있다.&lt;br /&gt;
특별한 상황이 아니라면 기본적으로 이동이 가능한 메모리를 사용하도록 하자.&lt;br /&gt;
할당 메모리 크기가 0인 이유는 삭제가 가능한 메모리를 할당받기 위해서이다.&lt;/p&gt;

&lt;p&gt;누가 메모리를 왜 삭제하는지는 운영체제에 대한 이해가 필요할 것 같다..&lt;br /&gt;
구글에 아무리 검색해봐도 삭제 가능한(discard) 메모리를 사용하는 이유는 모르겠다.&lt;br /&gt;
일단 0으로 할당함으로 써 스트림에서 자유로운 크기를 만들 수 있다는 것은 확실하다.&lt;/p&gt;

&lt;p&gt;오버헤드가 적은 HeapCreate, HeapAlloc 할당한 함수를 이용해&lt;br /&gt;
스트림을 만들고 저장하면 좋은데 아직 실력이 부족하다..&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// m_image는 CImage타입의 이미지 데이터를 가지고 있는 멤버변수이다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CFileException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Temp&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MyBMP.BMP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modeCreate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modeWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CArchive&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CArchive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HGLOBAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hGloMem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlobalAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GMEM_MOVEABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CreateStreamOnHGlobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hGloMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gdiplus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageFormatBMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pBmpData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlobalLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hGloMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlobalSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hGloMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pBmpData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GlobalUnlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hGloMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GlobalFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hGloMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;GlobalLock() 함수로 메모리의 단편화에서의 이동을 제한하고&lt;br /&gt;
실제 메모리의 첫번쨰 위치를 얻어오는 것이다.&lt;/p&gt;

&lt;p&gt;반드시 리소스를 사용했으면 해제 및 반납하는 작업을 빼먹지 말자.&lt;br /&gt;
&lt;strong&gt;&lt;del&gt;이해는 충분히 한 것 같으니 마친다.&lt;/del&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;글 다썻다아 ~&lt;/strong&gt;&lt;/p&gt;</content><author><name>타스 (TARS-C)</name></author><category term="파일" /><category term="CFile" /><category term="비트맵" /><category term="bitmap" /><category term="직렬화" /><category term="serialize" /><category term="serialization" /><category term="CArchive" /><summary type="html">[MFC][실습] Document CArchive 비트맵 파일 직렬화</summary></entry></feed>