<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://tars-c.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tars-c.github.io/" rel="alternate" type="text/html" /><updated>2020-04-13T18:59:52+09:00</updated><id>https://tars-c.github.io/feed.xml</id><title type="html">타스의 개발 블로그</title><subtitle>기록은 지식이라고 믿는 자의 블로그</subtitle><author><name>타스 (TARS-C)</name></author><entry><title type="html">[MFC] 파일 다이얼로그(CFileDialog)</title><link href="https://tars-c.github.io/mfc/MFC_CFileDialog/" rel="alternate" type="text/html" title="[MFC] 파일 다이얼로그(CFileDialog)" /><published>2020-04-13T00:00:00+09:00</published><updated>2019-04-13T00:00:00+09:00</updated><id>https://tars-c.github.io/mfc/MFC_CFileDialog</id><content type="html" xml:base="https://tars-c.github.io/mfc/MFC_CFileDialog/">&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;이 글에서는 CFileDialog가 제공하는 함수를 이용한 실습은 다루지 않습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MFC에서 사용자는 CFileDialog를 이용해 편리하게 파일을 저장하고 열 수 있습니다.&lt;br /&gt;
흔히 사용되는 메모장 프로그램에서도 FileDialog를 볼 수 있습니다.&lt;br /&gt;
CFileDialog는 Modal Dialog 방식을 이용해&lt;br /&gt;
DoModa() 함수를 호출하여 사용자에게 보여주고 사용합니다.&lt;/p&gt;

&lt;p&gt;CFileDialog 인스턴스를 생성하여 사용자에게 FileDialog를 보여주고&lt;br /&gt;
파일을 선택하면 파일에 대한 정보를 CFileDialog 인스턴스로 가져오게 됩니다.&lt;/p&gt;

&lt;p&gt;인스턴스 멤버변수에 접근하여 관련된 정보를 사용할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CFileDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bOpenFileDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LPCTSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpszDefExt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LPCTSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpszFileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFN_HIDEREADONLY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFN_OVERWRITEPROMPT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LPCTSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpszFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CWnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pParentWnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bVistaStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;cfiledialog-매개변수&quot;&gt;CFileDialog 매개변수&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;CFileDialog 인스턴스를 생성하기 위해서는 8가지 매개변수가 필요합니다.
    &lt;ol&gt;
      &lt;li&gt;FileDialog 파일 열기 및 저장 모드&lt;/li&gt;
      &lt;li&gt;기본 확장자 (저장 시 사용됨)&lt;/li&gt;
      &lt;li&gt;기본 파일명&lt;/li&gt;
      &lt;li&gt;열기모드 flags&lt;/li&gt;
      &lt;li&gt;필터&lt;/li&gt;
      &lt;li&gt;부모 윈도우&lt;/li&gt;
      &lt;li&gt;OPENFILENAME 구조체의 크기입니다.&lt;/li&gt;
      &lt;li&gt;비스타 스타일&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하나씩 풀어봅시다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;파일을 여는건 TRUE, 저장하는건 FALSE입니다.&lt;/li&gt;
  &lt;li&gt;기본확장자는 저장시에만 사용되며 필터링이 모든 파일(*.*)인 상태에서 사용가능합니다.&lt;br /&gt;  단순히 파일을 저장하는 것이라면 NULL을 추천드립니다.&lt;/li&gt;
  &lt;li&gt;기본파일명은 저장 및 열기할 때 아래 ‘파일 이름’ 란에 &lt;br /&gt;기본적으로 적혀있는 파일 이름을 나타냅니다.&lt;/li&gt;
  &lt;li&gt;OPENFILENAME 구조체에 해당하는 플래그 값을 의미합니다.&lt;/li&gt;
  &lt;li&gt;사용자가 해당 확장명을 가진 파일만 볼 수 있게 해주는 파일 확장명 필터입니다.&lt;/li&gt;
  &lt;li&gt;부모 윈도우를 의미합니다.&lt;br /&gt;  부모 윈도우를 지정하는 이유는 부모창에서 Dialog를 띄워서 보여주기 때문입니다.&lt;/li&gt;
  &lt;li&gt;OPENFILENAME 구조체의 크기를 이용하여 적절한 종류의 대화상자를 결정하게 됩니다. (기본값 사용)&lt;/li&gt;
  &lt;li&gt;TRUE는 비스타 윈도우 스타일을 사용하고 FALSE는 윈도우10 스타일을 사용합니다.&lt;br /&gt;  Windows10 기준, Visual Studio 2008 이상&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vista Style: TRUE(열기모드)&lt;br /&gt;
&lt;img src=&quot;../../assets/images/CFileDialog/vista_style_dialog.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vista Style: FALSE(열기모드)&lt;br /&gt;
&lt;img src=&quot;../../assets/images/CFileDialog/window10_style_dialog.png&quot; alt=&quot;img2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cfiledialog-확장명을-필터링---필터설명&quot;&gt;CFileDialog 확장명을 필터링 - 필터설명&lt;/h2&gt;
&lt;p&gt;FileDialog는 확장명에 대해서 필터링 할 수 있습니다.&lt;br /&gt;
여러 확장명을 필터링 할 수 있고, FileDialog 필터 리스트에 여러개의 필터를 추가할 수 있습니다.&lt;/p&gt;

&lt;p&gt;필터(Filter)는 &lt;code class=&quot;highlighter-rouge&quot;&gt;필터설명&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;필터확장명&lt;/code&gt; 으로 구성되어 있습니다.&lt;br /&gt;
각 구성 요소들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; 를 사용하여 구분하게 됩니다.&lt;br /&gt;
필터에 대한 텍스트 틀은 &lt;code class=&quot;highlighter-rouge&quot;&gt;필터설명 | 필터확장명; ||&lt;/code&gt;입니다.&lt;br /&gt;
마치 문자열 끝에 널값이 들어가듯이 필터 끝에는 || 문자가 2개 들어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;필터설명&lt;/code&gt;은 정말 필터에 대한 설명을 의미하기 때문에 아무거나 입력하셔도 됩니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;필터설명&lt;/code&gt; 요소 맨 뒤에는 필터링 할 파일확장명을 써주는 것이 좋습니다.&lt;br /&gt;
파일확장명을 쓰지 않을 경우 자동으로 구성요소 필터확장명에 적은적은 내용이 소괄호(,)로 감싸서&lt;br /&gt;
필터설명 끝에 덧붙여 FileDialog &lt;code class=&quot;highlighter-rouge&quot;&gt;필터 리스트&lt;/code&gt;에 나타납니다.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;예시:
	case1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;필터설명에 파일 확장명 미기입&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
		필터설명: Binary Files
		필터확장명: &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.bin&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.hex&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		출력되는 필터명: Binary Files&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.bin&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.hex&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	case2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;파일 확장명 기입&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
		필터설명: Binary Files &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.bin, &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.hex&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		필터확장명: &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.bin&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.hex&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		필터 리스트: Binary Files &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.bin, &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.hex&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;필터설명은 보통 All Files (*.*) 처럼 알아보기 쉽게&lt;br /&gt;
간단한 필터에 대한 설명과 함께 확장명을 써주는 것이 좋습니다.&lt;/p&gt;

&lt;h2 id=&quot;cfiledialog-확장명을-필터링---필터확장명&quot;&gt;CFileDialog 확장명을 필터링 - 필터확장명&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;필터확장명&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;필터할 파일 확장명&lt;/code&gt;을 의미합니다.&lt;/p&gt;

&lt;p&gt;필터설명에 확장명을 적더라도 두번째 요소에 해당하는&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;파일확장명을 어떻게 적냐에 따라서 FileDialog에서 파일을 필터링하게 되는 점&lt;/code&gt;을 유의하셔야 합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;필터확장명&lt;/code&gt;은 파일확장명을 입력하고 반드시 세미콜론(;)을 끝에 써줘야 합니다.&lt;br /&gt;
1개의 필터에서 2개의 확장명을 기준으로 필터링할 때 필요한 세미콜론은 2개입니다.&lt;/p&gt;

&lt;p&gt;확장명을 필터링하는 예시를 적어보겠습니다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1개의 필터에서 모든 파일 확장명을 필터링해보겠습니다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1개의 필터에서 2개의 파일 확장명을 필터링해보겠습니다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1개의 필터에서 2개의 파일 확장명을 필터링해보겠습니다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JPG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;필터를 사용하게 되면 텍스트(&lt;em&gt;.txt) 그리고 이미지(&lt;/em&gt;.jpg) 파일이 입력한 필터에 맞게 필터링 되어&lt;br /&gt;
폴더를 제외하고 해당하는 확장자를 가진 파일에 대해서만 File Dialog 파일 리스트에서 보여지게 됩니다.&lt;/p&gt;

&lt;h1 id=&quot;cfiledialog-생성&quot;&gt;CFileDialog 생성&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// MainDialog.cpp&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 필터를 이용한 FileDialog 띄우기 (저장모드)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LRESULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnInitDialogEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WPARAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LPARAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LPCTSTR&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;filesFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;All Files (*.*)| *.*; ||&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CFileDialog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myFile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filesFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dlg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// MainDialog.cpp&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 필터없이 가장 간단한 코드로 FileDialog 띄우기 (저장모드)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LRESULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnInitDialogEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WPARAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LPARAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CFileDialog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fileDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;오타 및 잘못된 내용에 대해 피드백 해주시는건 언제든 환영합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;글 업데이트 내역:&lt;br /&gt;
– None.&lt;/p&gt;</content><author><name>타스 (TARS-C)</name></author><category term="타스" /><category term="프로그래밍" /><category term="Cpp" /><category term="C++" /><category term="MFC" /><category term="Dialog" /><category term="CFileDialog" /><category term="파일다이얼로그" /><category term="파일" /><category term="CFile" /><summary type="html">[MFC] 파일 다이얼로그(CFileDialog)</summary></entry><entry><title type="html">[MFC] 모달 및 모달리스(Modal and Modeless)</title><link href="https://tars-c.github.io/mfc/MFC_%EB%AA%A8%EB%8B%AC%EA%B3%BC-%EB%AA%A8%EB%8B%AC%EB%A6%AC%EC%8A%A4/" rel="alternate" type="text/html" title="[MFC] 모달 및 모달리스(Modal and Modeless)" /><published>2020-04-12T00:00:00+09:00</published><updated>2019-04-12T00:00:00+09:00</updated><id>https://tars-c.github.io/mfc/MFC_%EB%AA%A8%EB%8B%AC%EA%B3%BC%20%EB%AA%A8%EB%8B%AC%EB%A6%AC%EC%8A%A4</id><content type="html" xml:base="https://tars-c.github.io/mfc/MFC_%EB%AA%A8%EB%8B%AC%EA%B3%BC-%EB%AA%A8%EB%8B%AC%EB%A6%AC%EC%8A%A4/">&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;p&gt;윈도우즈에서 사용되는 Dialog는 2가지 종류로 구분됩니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Modal Dialog&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Modeless Dialog&lt;/code&gt;가 있습니다.&lt;/p&gt;

&lt;p&gt;둘은 서로 비슷하면서 다른 특징을 가지고 있습니다.&lt;br /&gt;
윈도우즈에서 사용되는 Dialog는 부모 창이 종료되면 자동으로 종료되는 특징을 가지고 있습니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CDialog 타입의 객체를 생성했을 경우 메시지 및 이벤트 처리가 상당히 복잡할 수 있습니다.&lt;br /&gt;
CDialog, CDialogEx 클래스를 상속받아 자식 클래스를 만들어&lt;br /&gt;
이벤트를 처리하는 방식이 편하고 좋습니다.&lt;/p&gt;

&lt;h2 id=&quot;1-모달-modal-설명&quot;&gt;1. 모달 (Modal) 설명&lt;/h2&gt;
&lt;p&gt;Modal Dialog의 특징은 Modal Dialog가 활성화 되었을 땐&lt;br /&gt;
Dialog가 종료될 때 까지 다른 창을 제어할 수 없는 &lt;code class=&quot;highlighter-rouge&quot;&gt;제어권 독점&lt;/code&gt; 형태를 가지고 있습니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하나의 창에서만 작업을 처리하기에 프로그래밍이 매우 간편합니다.&lt;br /&gt;
사용자에게 중요한 입력을 무조건 받아야할 때 사용하면 유용합니다.&lt;br /&gt;
Modal Dialog의 대표적인 예시로는 MessageBox가 있습니다.&lt;/p&gt;

&lt;p&gt;생성에 사용되는 방식은 정적으로 변수를 선언하거나 동적할당으로 생성이 가능합니다.&lt;br /&gt;
MFC에서 DoModal() 함수를 이용하여 창을 생성합니다.&lt;br /&gt;
창 닫기 및 종료는 EndDialog() 함수를 이용합니다.&lt;br /&gt;
EndDialog() 함수를 호출한다고 할당했던 메모리가 자동을 해제되지는 않습니다.&lt;/p&gt;

&lt;p&gt;Modeless Dialog랑 다르게 창이 종료될 때 눌렀던 버튼에 해당하는 컨트롤ID 값을 반환합니다.&lt;br /&gt;
반환값을 이용해 조건을 검사하여 특정 버튼을 눌렀는지에 대해 검사할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;2-모달-modal-코드&quot;&gt;2. 모달 (Modal) 코드&lt;/h2&gt;
&lt;p&gt;MFC View InitDialogEx(…) 함수에서 사용 되는 코드입니다.&lt;/p&gt;

&lt;p&gt;InitDialog() 함수가 아닌 InitDialogEx()를 사용하는 이유는&lt;br /&gt;
Based Dialog 환경에서 MainDialog가 생성된 후 바로 Dialog를 사용자에게 보여주려고 했지만,&lt;br /&gt;
Modal Dialog 특징으로 창에 제어권이 독점되어 OnCreate(), OnInitDialog() 함수 처리문에서&lt;br /&gt;
Modal Dialog를 생성해서 보여줘도 Main Dialog가 생성 되기 전에 Modal Dialog가 생성되서 나타나기 떄문에&lt;br /&gt;
PostMessage() 함수를 이용하여 사용자 정의 메시지(WM_USER)를 보내고 처리하여 함수를 확장한 것입니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Modal Dialog Create/Destroy 를 간단한 예시 코드로 알아보겠습니다.&lt;br /&gt;
ModalDialog는 리소스뷰에서 CDialog를 상속받아 작성된 클래스입니다.&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 모달 다이얼로그 생성 (MainDialog.cpp)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LRESULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnInitDialogEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WPARAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LPARAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ModalDlg_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModalDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this = 부모 윈도우&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ModalDlg_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModalDlg_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ModalDlg_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 왼쪽 마우스 클릭 시 Modal Dialog 닫기 (ModalDialog.cpp)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModalDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnLButtonDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;EndDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CDialogEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnLButtonDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;EndDialog() 함수가 호출되면 DoModal() 함수가 해당하는 컨트롤 ID값을 반환 후 밑에 있는 코드들이 실행됩니다.&lt;/p&gt;

&lt;h2 id=&quot;3-모달리스-modeless-설명&quot;&gt;3. 모달리스 (Modeless) 설명&lt;/h2&gt;
&lt;p&gt;Modeless Dialog의 특징은 창이 열리더라도&lt;br /&gt;
Dialog 종료와 상관없이 다른 창을 전환하여 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;일반적인 프로그램은 Modeless Dialog 방식으로 작동됩니다.&lt;br /&gt;
사용자가 창을 전환할 수 있기에 다시 화면을 그리거나&lt;br /&gt;
창 전환시에 특정 이벤트 및 메시지가 발생할 수 있으므로 이를 고려하는 프로그래밍을 해야합니다.&lt;br /&gt;
Modeless Dialog의 예시로는 윈도우즈 메모장 찾기(Ctrl + F) Dialog입니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;동일한 부모 윈도우를 기준으로 Modal Dialog와 Modeless Dialog를 생성했을 때&lt;br /&gt;
Modeless Dialog는 Modal Dialog 특징인 &lt;code class=&quot;highlighter-rouge&quot;&gt;제어권 독점에 상관없이 자유롭게 전환&lt;/code&gt;할 수 있습니다.&lt;/p&gt;

&lt;p&gt;생성에 사용되는 방식은 동적할당으로만 가능하며&lt;br /&gt;
MFC에서 Create() 함수를 이용하여 메모리에 할당받아&lt;br /&gt;
ShowWindow() 함수를 이용하여 사용자에게 창을 보여줍니다.&lt;br /&gt;
창 닫기 및 종료는 DestroyWindow() 함수를 이용합니다.&lt;br /&gt;
DestroyWindow() 함수를 호출한다고 할당했던 메모리가 자동을 해제되지는 않습니다.&lt;/p&gt;

&lt;h2 id=&quot;4-모달리스-modeless-코드&quot;&gt;4. 모달리스 (Modeless) 코드&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// MainDialog.cpp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnInitDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CDialogEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnInitDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelessDlg_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ModelessDlg_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModalDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this = 부모 윈도우 ModelessDlg_ = new ModalDialog(this); // this = 부모 윈도우 ModelessDlg_ = new ModalDialog(this); // this = 부모 윈도우 ModelessDlg_ = new ModalDialog(this); // this = 부모 윈도우&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ModelessDlg_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDD_MODELESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ModelessDlg_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShowWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SW_SHOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ModelessDialog.cpp&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 왼쪽 마우스 클릭 시 Modeless Dialog 닫기&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelessDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnLButtonDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DestroyWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CDialogEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnLButtonDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Modeless Dialog는 창이 종료되더라도 반환되는 ID값이 따로 없습니다.&lt;/p&gt;

&lt;h2 id=&quot;5-쓸모-없는-결론&quot;&gt;5. 쓸모 없는 결론&lt;/h2&gt;
&lt;p&gt;간단한 코드와 함께 Modal과 Modeless에 대해 알아보았습니다.&lt;br /&gt;
간단히 아래에 특징들을 정리해보았습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dialog
    &lt;ul&gt;
      &lt;li&gt;Resource View에서 상속을 받아 클래스로 확장하여 생성하는 것이 편리하고 좋음&lt;/li&gt;
      &lt;li&gt;EndDialog(), DestroyWindow() 함수 사용과 별개로 할당받은 메모리는 해제해야함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Modal
    &lt;ul&gt;
      &lt;li&gt;제어권 독점으로 인한 창 전환불가&lt;/li&gt;
      &lt;li&gt;InitDialog() 에서 생성하고 보여줄 시 Main Dialog 보여지기 전에 생성됨&lt;/li&gt;
      &lt;li&gt;사용자에게 중요한 것을 무조건 입력받을 때 사용 시 유용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Modeleess
    &lt;ul&gt;
      &lt;li&gt;Modal과 반대로 창 전환 자유롭게 가능&lt;/li&gt;
      &lt;li&gt;동일한 부모를 기준으로 Modal Dialog가 보여지는 중에도 자유롭게 접근 가능&lt;/li&gt;
      &lt;li&gt;찾기, 바꾸기 같은 사용자에게 편리성을 가져다주는 창이 필요할 때 사용 시 유용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;오타 및 잘못된 내용에 대해 피드백 해주시는건 언제든 환영합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;글 업데이트 내역:&lt;br /&gt;
– None.&lt;/p&gt;</content><author><name>타스 (TARS-C)</name></author><category term="타스" /><category term="프로그래밍" /><category term="Cpp" /><category term="C++" /><category term="MFC" /><category term="모달" /><category term="모달리스" /><category term="다이얼로그" /><category term="Modal" /><category term="Modeless" /><category term="Dialog" /><summary type="html">[MFC] 모달 및 모달리스(Modal and Modeless)</summary></entry><entry><title type="html">[C++] 멤버이니셜라이저(Member-Initializer)</title><link href="https://tars-c.github.io/cpp/C++_%EB%A9%A4%EB%B2%84%EC%9D%B4%EB%8B%88%EC%85%9C%EB%9D%BC%EC%9D%B4%EC%A0%80/" rel="alternate" type="text/html" title="[C++] 멤버이니셜라이저(Member-Initializer)" /><published>2020-04-10T00:00:00+09:00</published><updated>2019-04-10T00:00:00+09:00</updated><id>https://tars-c.github.io/cpp/C++_%EB%A9%A4%EB%B2%84%EC%9D%B4%EB%8B%88%EC%85%9C%EB%9D%BC%EC%9D%B4%EC%A0%80</id><content type="html" xml:base="https://tars-c.github.io/cpp/C++_%EB%A9%A4%EB%B2%84%EC%9D%B4%EB%8B%88%EC%85%9C%EB%9D%BC%EC%9D%B4%EC%A0%80/">&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;멤버변수의 선언 후 기본값이 Visual Studio에서는&lt;br /&gt;
디버그 환경으로 빌드할 시 0이 아닌 0xCDCDCD라는 이상한 값이 들어가 있습니다.&lt;br /&gt;
기본값이 잘못되어 런타임에서 프로그램이 실행되다가 갑자기 멈춘다거나&lt;br /&gt;
결과물이 다르게 출력되는 현상이 나타납니다.&lt;/p&gt;

&lt;p&gt;값을 초기화 한다는 것은 프로그래밍에서 매우 중요한 역할을 합니다.&lt;br /&gt;
클래스 멤버변수를 초기화하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;생성자&lt;/code&gt;를 이용하거나 &lt;code class=&quot;highlighter-rouge&quot;&gt;멤버이니셜라이저&lt;/code&gt;를 이용합니다.&lt;br /&gt;
레퍼런스 타입을 가진 멤버변수 같은 경우는 생성자를 이용해 초기화할 수 없습니다.&lt;br /&gt;
멤버이니셜라이저의 호출은 객체가 생성되기 전에 호출됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;멤버이니셜라이저가 사용되는 방식은 크게 4가지정도 있습니다.
    &lt;ol&gt;
      &lt;li&gt;멤버변수 초기화&lt;/li&gt;
      &lt;li&gt;부모 멤버변수 초기화&lt;/li&gt;
      &lt;li&gt;상수 멤버변수 초기화 (&amp;lt; C++11)&lt;/li&gt;
      &lt;li&gt;레퍼런스 멤버변수 초기화&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 글에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;멤버이니셜라이저&lt;/code&gt;를 이용하여&lt;br /&gt;
멤버변수 초기화 방법에 대해 알아봅니다.&lt;br /&gt;
기본적인 방법만 알고 있으면 크게 어려울 것이 없습니다.&lt;/p&gt;

&lt;h2 id=&quot;1-사용방법&quot;&gt;1. 사용방법&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;*/&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;위&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;코드는&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;해당하는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;변수를&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;초기화한다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;라는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;의미를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;가지고&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;있습니다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;생성자&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;정의부&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;헤더에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;멤버변수와&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;초기화할&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;값을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;넣어주시면&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;됩니다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;여러개의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;멤버변수를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;초기화할&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;경우&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;써주고&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;다음&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;초기화할&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;내용을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;적어줍니다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;중요한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;점은&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;세미콜론&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;들어가지&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;않습니다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;/*&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;Member1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Member2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Member3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 위와 같이 가독성 있게 수정해서 쓸 수도 있습니다.&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;2-멤버변수-초기화&quot;&gt;2. 멤버변수 초기화&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusID_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusID_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Chris&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShowData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Parent:: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ID = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusID_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, Name = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShowData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;출력 결과:
	* 멤버 statusID_ 값이 5로, Name_ 값이 'Chris' 로 초기화 되었다.

Parent:: ID = 5, Name = Chris
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-부모-멤버변수-초기화&quot;&gt;3. 부모 멤버변수 초기화&lt;/h2&gt;
&lt;p&gt;자식(Child) 객체의 멤버이니셜라이저를 이용해 부모(Parent) 객체의 멤버변수들을 초기화할 수 있습니다.
멤버이니셜라이저에서 가장 많이 사용되는 방법이라고 생각합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;pch.h&quot; // visual studio 2017
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusID_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusID_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Chris&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statusID_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;strcpy_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShowData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Parent:: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ID = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusID_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, Name = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusID_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;statusID_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;James&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Jack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShowData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Child:: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ID = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusID_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, Name = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParentShowData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShowData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShowData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParentShowData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;출력 결과:
	&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 자식&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Child&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 객체의 멤버이니셜라이저에서 부모&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Parent&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 매개변수 생성자를 호출하여
	&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 부모&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Parent&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 멤버변수가 초기화 되었다.

Child:: ID &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 10, Name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; James
Parent:: ID &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 99, Name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Jack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4-상수-멤버변수-초기화--c11&quot;&gt;4. 상수 멤버변수 초기화 (&amp;lt; C++11)&lt;/h2&gt;
&lt;p&gt;C++11 에서는 멤버이니셜라이저를 사용하지 않고도 상수 멤버변수를 선언하자마자 쉽게 초기화 할 수 있습니다.&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;(warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions])&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GCC 표준 옵션(-std=98)을 적용하여 컴파일 해봤지만… 위와 같은 warning만 보여지고 error는 없었습니다.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-레퍼런스-멤버변수-초기화&quot;&gt;5. 레퍼런스 멤버변수 초기화&lt;/h2&gt;
&lt;p&gt;레퍼런스의 특징은 선언을 했으면 반드시 초기화 값을 가지고 있어야합니다.&lt;br /&gt;
nullptr값으로 변경할 수 없으며, nullptr은 상수 레퍼런스(const &amp;amp;ref)만 사용가능합니다.&lt;/p&gt;

&lt;p&gt;레퍼런스 타입 멤버변수를 가진 객체를 생성하기 위해서는&lt;br /&gt;
레퍼런스 타입 멤버변수는 멤버이니셜라이저를 이용하여 반드시 초기화가 되어야만 합니다.&lt;/p&gt;

&lt;p&gt;클래스에서 여러개의 생성자를 가지고 있으면&lt;br /&gt;
모든 생성자에서 멤버이니셜라이저를 이용하여 레퍼런스 타입의 멤버변수를 초기화해야만 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(error: constructor for ‘Point’ must explicitly initialize the reference member ‘x’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;멤버이니셜라이저로 초기화 하지 않으면 위와 같은 컴파일 오류가 발생하게 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lang&quot; data-lang=&quot;lang&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

class Point
{
public:
	int &amp;amp;x;
	int &amp;amp;y;

	/*
	멤버이니셜라이저로 레퍼런스 타입의 멤버변수를 초기화 하지 않는다면 이 생성자는 사용할 수 없습니다.
	현재 모든 멤버변수가 레퍼런스 타입이므로 참조할 변수가 없어 기본 생성자는 사용할 수 없습니다.
	Point()
	{

	}
	*/

	Point(int &amp;amp;px, int &amp;amp;py) : x(px), y(py)
	{
	}
	void ShowData()
	{
		cout &amp;lt;&amp;lt; &quot;Point:: &quot; &amp;lt;&amp;lt; &quot;x = &quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &quot;, y = &quot; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; '\n';
	}
};

int main()
{
	int x = 10;
	int y = 20;
	Point pt(x, y);
	pt.ShowData();
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;출력 결과:
	&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; main 함수에서 x, y를 레퍼런스 타입으로 받아 객체에 넘겨주었다.

Point:: x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 10, y &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-쓸모없는-결론&quot;&gt;6. 쓸모없는 결론&lt;/h2&gt;
&lt;p&gt;총 4가지 사용방법에 대해 코드와 함께 정리해보았습니다.&lt;br /&gt;
기본적으로 멤버변수를 초기화할 때에는 멤버이니셜라이저를 사용하는 것이 좋습니다.&lt;br /&gt;
멤버이니셜라이저는 객체가 생성되기 전에 호출됩니다.&lt;br /&gt;
부모 생성자를 초기화할 때에는 아주 유용할 것 같습니다.&lt;br /&gt;
상수 멤버변수 초기화는 C++11부터는 편하게 초기화할 수 있으므로 사용되지 않습니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;오타 및 잘못된 내용에 대해 피드백 해주시는건 언제든 환영합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;글 업데이트 내역:&lt;br /&gt;
– 2012.04.13: 잘못된 오타 수정&lt;/p&gt;</content><author><name>타스 (TARS-C)</name></author><category term="타스" /><category term="프로그래밍" /><category term="Cpp" /><category term="C++" /><category term="멤버이니셜라이저" /><category term="Member-Initializer" /><summary type="html">[C++] 멤버이니셜라이저(Member-Initializer)</summary></entry></feed>